<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[flex布局学习和总结]]></title>
    <url>%2F2017%2F06%2F11%2Fflex-conclusion%2F</url>
    <content type="text"><![CDATA[前言很长一段时间, 我知道有flex这个布局方式, 但是始终没有去学它. 最近由于学习小程序，发现里面需要使用flex布局, 于是决定学习一下. 在拜读了阮一峰的flex布局教程和HaoyCn有关flex属性的回答后整理成此文章，以便加深印象。 什么是flexFlexbox Layout，官方名为 CSS Flexible Box Layout Module, 意为”弹性布局”，是CSS3中引入的一种更加灵活高效的布局/对齐/排序方式(还有一种更适合大型布局的网格布局CSS Grid Layout Module). flex是flexible的缩写. 任何一个容器都可以指定为flex布局。 123.box &#123; display: flex;&#125; 行内元素也可以使用flex布局。 123.box &#123; display: inline-flex;&#125; flex的基本概念 1、采用flex布局的元素被称为flex容器（flex container），他的子元素即为flex元素（flex item）。2、flex容器中包含两个相互垂直的轴，即主轴（main axis）和副轴（cross axis)。3、flex元素沿主轴从主轴起点 (main start)到主轴终点 (main end)依次排布。4、如果flex容器包含多行flex元素，则flex行（flex lines）沿副轴从副轴起点（cross start）到副轴终点（cross end)依次排布。5、单个flex元素占据的主轴空间叫做主轴程度（main size），占据的副轴空间叫做副轴长度（cross size）。 flex的兼容性 flex属性用于flex容器的属性以下6个属性设置在容器上 属性 含义 flex-direction 主轴方向 flex-wrap 换行样式 flex-flow 前两个的简写形式 justify-content 主轴对齐方式 align-items 单行的副轴对齐方式 align-content 多行的副轴对齐方式 注意：flex容器的column-*属性会失效。flex容器无法拥有::first-line和 ::first-letter虚元素。 flex-direction属性flex-direction 属性决定主轴方向(即项目的排序方向)。 含义 主轴方向 可选值 row 、row-reverse 、 column 、 column-reverse 默认值 row row 主轴为水平方向，七点在左端。 row-reverse 主轴为水平方向，起点在右端。 column 主轴为垂直方向，起点在上沿。 column-reverse 主轴为垂直方向，起点在下沿。 123.box&#123; flex-direction: row | row-reverse | column | column-reverse;&#125; flex-wrap属性默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。 123.box&#123; flex-wrap: nowrap | wrap | wrap-reverse;&#125; 它可能取三个值 （1）nowrap（默认）：不换行。 （2）wrap：换行，第一行在上方。 （3）wrap-reverse：换行，第一行在下方。 flex-flow属性flex-flow属相是flex-direction属性和flex-wrap属性的简写形式，默认值为 row nowrap。123.box&#123; flex-flow:&lt;flex-direction&gt;||&lt;flex-wrap&gt;;&#125; justify-content属性它可能取5个值，具体对齐方式与轴的方向有关，下面假设主轴为从左到右。 值 主轴方向 flex-start 默认值：左对齐 flex-end 右对齐 center 居中 space-between 两端对齐，项目之间的间隔都相等。 space-around 每个项目两侧的间隔相等。所以，项目之间比项目与边框的间隔大一倍。 123.box&#123; justify-content: flex-start | flex-end | center | space-between | space-around;&#125; align-items属性align-items属性定义项目在交叉轴上如何对齐。它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。 值 主轴方向 flex-start 交叉轴的起点对齐。 flex-end 交叉轴的终点对齐。 center 交叉轴的中点对齐。 baseline 项目的第一行文字的基线对齐。 stretch （默认值）:如果项目未设置高度或设为auto，将占满整个容器的高度。 123.box&#123; align-items: flex-start | flex-end | center | baseline | stretch; &#125; align-content属性align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。该属性可能取6个值。 值 主轴方向 flex-start 与交叉轴的起点对齐。 flex-end 与交叉轴的终点对齐。 center 与交叉轴的中点对齐。 space-between 与交叉轴两端对齐。轴线之间的间隔平均分布。 space-around 每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch （默认值）：轴线占满整个交叉轴。 123.box &#123; align-content: flex-start | flex-end | center | space-between | space-around | stretch;&#125; 用于flex元素的属性这类属性有6种，分别为: 属性 含义 order 排列顺序。 align-self flex元素的副轴对齐方式，对应与flex容器的align-items。 flex-grow 放大比例。 flex-shrink 缩小比例。 flex-basis 初始大小。 flex （上面三个的简写形式。） 注意：flex元素的 float，clear和vertical-align会失效。 order属性order属性定义项目的排序顺序。数值越小，排列越靠前，默认为0. 123.box&#123; order:&lt;integer&gt;;&#125; align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 123.box&#123; align-self:&#123; auto | flex-start | flex-end | center | baseline | stretch &#125;&#125; flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 123.box&#123; flex-grow:&lt;number&gt;; /*default 0*/&#125; flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，盖项目将缩小。flex-shrink为 0 则表示，即使flex容器空间不足，该flex元素也不缩小。 123.box&#123; flex-shrink:&lt;number&gt;; /* default 1 */&#125; flex-basis属性 含义 初始大小 可选值 auto、(非负值)。 默认值 auto。 123.box &#123; flex-basis: &lt;length&gt; | auto; /* default auto */&#125; flex-basis定义了分配剩余空间之前flex元素的初始大小，可为长度值（如 20%，5rem等）或 auto等关键词。flex-basis: auto表示, 以flex元素的主轴长度为flex-basis. 若flex元素的主轴长度也是auto, 则以flex元素内容(即所有子元素)的大小为flex-basis。 flex属性 含义 flex-grow, flex-shrink和flex-basis的简写形式 可选值 none [ &lt;‘flex-grow’&gt; &lt;‘flex-shrink’&gt;?、&lt;‘flex-basis’&gt; ] 默认值 0 1 auto ||用来分割两个或多个选项, 从中选取一个或多个, 不限次序. |用来分割两个或多个选项, 从中选取一个. []只是用来分组的. ?代表可选. 举例来说, a | [ b || c ]包含的可能情况有a, b, c, b c, c b.现在回过头来再看none | [ &lt;‘flex-grow’&gt; &lt;‘flex-shrink’&gt;? || &lt;‘flex-basis’&gt; ]就清晰多了.注意, none是一个特殊值, 相当于0 0 auto.另外, 如果flex中不指定: flex-grow成员, 则flex-grow会被置为1. flex-shrink成员, 则flex-shrink会被置为1. flex-basis成员, 则flex-basis会被置为0.注意: flex的初始值是0 1 auto, 即由每个flex因子本身的默认值组成(比方说flex-grow的默认值就是0).]]></content>
      <categories>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>Flex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【读书】《锋利的jQuery》]]></title>
    <url>%2F2017%2F03%2F10%2Fsharp-jquery%2F</url>
    <content type="text"><![CDATA[通过对《锋利的jQuery》（第二版）一书的学习，发现此书讲解通俗易懂，是学习jQuery的一本很好的指导书，特作如下总结。此书主要讲解了jQuery的常用操作，包括认识jQuery，jQuery选择器，jQuery中的DOM操作，jQuery中的事件和动画，jQuery对表单、表格的操作及更多应用，jQuery与Ajax的应用等。 jQuery的优势jQuery强调的理念是写得少，做的多。jQuery独特的选择器、链式操作、事件处理机制和封装完善的Ajax都是其他JavaScript库望尘莫及的。概括起来，jQuery有以下优势。 轻量级 强大的选择器 出色的DOM操作 可靠的事件处理机制 完善的Ajax 不污染顶级变量 出色的浏览器兼容性，支持IE6.0+、Firefox3.6+、Safari5.0+、Opera、Chrome 链式操作方式 隐式迭代 行为层与结构层的分离 丰富的插件支持 完善的文档 开源 jQuery代码的编写在jQuery库中，$就是jQuery的一个简写形式，例如$(&quot;#foo&quot;)和jQuery(&quot;#foo&quot;)是等价的。规范：1、对于同一个对象不超过3个操作的，可以直接写在一行2、对于同一个对象的较多操作，建议每行写一个操作3、对于多个对象的少量操作，可以每个对象写一行，涉及子元素的，可以考虑缩进建议：jQuery对象使用$开头，例：var $variable = jQuery对象，var variable= DOM对象 window.onload 和 $(document).ready() 对比 - window.onload $(document).ready() 执行时间 必须等待网页中所有的内容加载完毕（）包括图片才执行 只需要 DOM 加载完就执行（不包括图片等） 编写个数 不能同时编写多个 能同时编写多个 简化写法 无 $(document).ready(function(){}) 可以简写成 $(function(){}) jQuery 的链式操作风格用过jQuery的朋友都知道他强大的链式操作，方便，简洁，易于理解， 如下:1$(this).addClass("current").next().show().parent().siblings().children("a").removeClass("current").next().hide(); 为了进一步改善代码的可读性和可维护性可将代码改为如下格式：1234$(this).addClass("current") // 给当前元素添加 "current" 样式 .next().show() // 下一个元素显示 .parent().siblings().children("a").removeClass("current") // 父元素的同辈元素的子元素 &lt;a&gt; 移除 "current" 样式.next().hide(); //他们的下一个元素隐藏 jQuery 对象和 DOM 对象DOM对象就是DOM树中的节点。可以通过JavaScript中的getElementsByTagName或者getElementById来获取元素节点。 jQuery对象就是通过jQuery包装DOM对象后产生的对象。 在jQuery对象中违法使用DOM对象的任何方法。同样，DOM对象也不能使用jQuery里的方法。 所以我们要区分什么是JavaScript原生方法，什么是jQuery方法。 以下是都是错误的方法：123$("#id").innerHTML;$("#id").checked;document.getElementById("id").html(); jQuery对象和DOM对象的相互转换在讨论jQuery对象和DOM对象的相互转换之前，先约定好定义变量的风格，如果获取的对象时jQuery对象，那么在变量前面加上$符号。 jQuery 对象转化为 DOM 对象jQuery对象不能使用DOM中的方法，jQuery提供了两种方法将一个jQuery对象转换DOM对象，即[index]和get（index）。 （1）jQuery对象是一个类似数组的对象，可以通过[index]得到相应DOM对象。 123var $cr = $("#cr"); //jQuery对象var cr = $cr[0]; //将jQuery对象转为DOM对象console.log(cr); //查看是否转换成功 （2）通过get(index)得到。123var $cr = $("#cr"); //jQuery对象var cr = $cr.get(0); //DOM对象console.log(cr); //查看是否转换成功 DOM 对象转化为 jQuery 对象只需要使用$()将DOM对象包装起来即可得到jQuery对象。 12var cr = document.getElementById("cr"); //DOM对象var $cr = $(cr); //将DOM对象转换jQuery对象 注：DOM对象只能使用DOM方法，jQuery对象只能使用jQuery的方法。 解决 jQuery 和其他库的冲突在 jQuery 库中，几乎所有的插件都被限制在它的命名空间里。通常，全局对象都被很好地储存在 jQuery 的命名空间里。因此和其他库一起使用时，不会引起冲突。注：默认情况下，jQuery用$作为自身的快捷方式。 1、jQuery库在其他库之后导入 （1）在其他库和jQuery库加载完毕之后，可以在任何时候调用jQuery.noConflict()函数将变量$的控制权移交其他的JavaScript库。例：12345678910111213&lt;!-- 引入prototype库 --&gt;&lt;script type="text/javascript" src="lib/prototype.js"&gt;&lt;/script&gt;&lt;!-- 引入jQuery库 --&gt;&lt;script type="text/javascript" src="lib/jQuery.js"&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt; jQuery.noConflict(); //将变量$的控制权移交给prototype.js jQuery(function()&#123; //使用jQuery jQuery("p").click(function()&#123; alert(jQuery(this).text()); &#125;); &#125;); $('pp').style.display = 'none'; //使用prototype.js隐藏元素&lt;/script&gt; （2）想确保jQuery不与其他库冲突，又想自定义快捷方式：例：123456789&lt;script type="text/javascript"&gt; var $j = jQuery.noConflict(); //自定义快捷方式 $j(function()&#123; //使用jQuery，利用自定义快捷方式 $j $j("p").click(function()&#123; alert.($j(this).text()); &#125;); &#125;); $('pp').style.display = 'none'; //使用prototype.js隐藏元素&lt;/script&gt; （3）如果你还想继续使用 $ 而不管其他函数的 $() 方法，同时又不想与其他库冲突，那么你可以其一、123456789&lt;script type="text/javascript"&gt; jQuery.noConflict(); //将变量$的控制权移交给prototype.js jQuery(function($)&#123; //使用jQuery设定页面加载时执行的函数 $("p").click(function()&#123; //函数内部继续使用$() alert.($(this).text()); &#125;); &#125;); $('pp').style.display = 'none'; //使用prototype.js隐藏元素&lt;/script&gt; 其二、1234567891011&lt;script type="text/javascript"&gt; jQuery.noConflict(); //将变量$的控制权移交给prototype.js (function($)&#123; //定义匿名函数 $(function()&#123; //匿名函数内部的$均为jQuery $("p").click(function()&#123; alert.($(this).text()); &#125;); &#125;); &#125;)(jQuery); //执行匿名函数且传递实参jQuery $('pp').style.display = 'none'; //使用prototype.js隐藏元素&lt;/script&gt; 2、jQuery在其他库之前导入 直接使用jQuery而非$来做jQuery的工作，$()方法作为其他库的快捷方式，无需调用jQuery.noConflict()方法 jQuery选择器jQuery选择器的优势1、简洁的写法使用$(&quot;#ID&quot;)代替document.getElementById()，使用$(&quot;tagName&quot;)代替document.getElementsByTagName()函数2、支持CSS1到CSS3选择器3、完善的处理机制，即，使用jQuery获取不存在的元素也不会报错 注：$(&quot;#tt&quot;)获取的永远是对象，即使网页上没有元素，因此当要使用jQuery检查某个元素在网页上是否存在，不能使用如下代码：12345if($("#tt"))&#123; /* do something */ &#125;应根据获取的元素长度来判断：if($("#tt").length &gt; 0)&#123; /* do something */ &#125;或转换成DOM对象：if($("#tt")[0])&#123; /* do something */ &#125; 基本选择器 选择器 描述 返回 示例 #id 根据给定id匹配一个元素 单个元素 $(“#test”)选取id为test的元素 .class 根据给定类名匹配元素 集合元素 $(“.test”)选取所有class为test的元素 element 根据给定元素名匹配元素 集合元素 $(“p”) * 匹配所有元素 集合元素 $(“*”) selector1,selector2… 将每个选择器匹配到的元素合并后一起返回 集合元素 $(“div,span,p.myClass”) 层次选择器 选择器 描述 返回 示例 $(“ancestor descendant”) 选取ancestor元素里所有descendant（后代）元素 集合元素 $(“div span”)选取div里所有span元素 $(“parent&gt;child”) 与CSS的子选择器一样 集合元素 $(“div&gt;span”) $(“prev+next”) 与CSS的相邻同胞选择器一样 集合元素 $(“.one+div”) $(“prev~sibling”) 与CSS的通用的同胞组合选择器一样 集合元素 $(“#two~div”) 可以使用next()方法代替$(&#39;prev+next&#39;)1$(".one+div"); ==&gt; $(".one").next("div"); 使用nextAll()代替$(&#39;#prev~sibling&quot;)1$("#prev~div"); ==&gt; $("#prev").nextAll("div"); 基本过滤选择器 选择器 描述 返回 示例 :first 选取第一个元素 单个元素 $(“div:first”)选取所有元素中第1个元素 :last 选取最后一个元素 单个元素 $(“div:last”)解释类似:first :not(selector) 去除所有与给定选择器匹配的元素 集合元素 $(“input:not(.myClass)”) :even 选取索引是偶数的元素，索引从0开始 集合元素 $(“input:even”) :odd 选取索引是奇数的元素，索引从0开始 集合元素 $(“input:odd”) :eq(index) 选取索引是index的元素，index从0开始 单个元素 $(“input:eq(1)”) :gt(index) 选取索引大于index的元素，index从0开始 集合元素 $(“input:gt(1)”) :lt(index) r选取索引小于index的元素，index从0开始 集合元素 $(“input:lt(1)”) :header 选取所有标题元素，例h1，h2 集合元素 $(“:header”) :animated 选取正在执行动画的元素 集合元素 $(“div:animated”) :focus 选取获得焦点的元素 集合元素 $(“:focus”) 内容过滤选择器 选择器 描述 返回 示例 :contains(text) 选取含有文本内容为“text”的元素 集合元素 $(“div:contains(‘me’)”)选取所有含有文本”me”的div元素 :empty 选取不包含子元素或文本的空元素 集合元素 $(“div:empty”) :has(selector) 选取含有选择器所匹配的元素的元素 集合元素 $(“div:has(p)”)选取含有p元素的div元素 :parent 选取含有子元素或文本元素的元素 集合元素 $(“div:parent”) 可见性过滤选择器 选择器 描述 返回 示例 :hidden 选取所有不可见元素 集合元素 $(“:hidden”)选取所有不可见元素 :visible 选取所有可见元素 集合元素 $(“div:visible”)选取可见的div元素 属性过滤选择器 选择器 描述 返回 示例 [attribute] 选择拥有此属性的元素 集合元素 $(“div[id]”)选取拥有id属性的div元素 [attribute=value] 选择拥有属性值为value的元素 集合元素 $(“div[title=test]”) [attribute!=value] 选择属性值不等于value的元素 集合元素 $(“div[title!=test]”),没有属性title的元素也会被选取 [attribute^=value] 选择属性值以value开始的元素 集合元素 $(“div[title^=test]”) [attribute$=value] 选择属性值以value结束的元素 集合元素 $(“div[title$=test]”) [attribute*=value] 选择属性值含有value的元素 集合元素 $(“div[title*=test]”) [attribute丨=value] 选择属性等于给定字符串或以该字符串为前缀（该字符串后跟一个连字符‘-’）的元素 集合元素 $(“div[title丨=”en”]”)选取title属性等于en或以en为前缀的元素 [attribute~=value] 选取属性用空格分隔的值中包含一个给定值的元素 集合元素 $(“div[title~=”uk”]”) [attribute1][attribute2] … 用属性选择器合并成复合选择器，满足多个条件，缩小范围 集合元素 $(“div[id][title$=”test”]”)选取拥有属性id并且属性title以”test”结束的div元素 子元素过滤选择器 选择器 描述 返回 示例 :nth-child(index/even/odd/equatioin) 选取每个父元素下第index个子元素或奇偶元素，index从1开始 集合元素 将为每一个父元素匹配子元素 :first-child 选取每个父元素的第一个子元素 集合元素 将为每一个父元素匹配子元素 :last-child 选取每个父元素的最后一个子元素 集合元素 将为每一个父元素匹配子元素 :only-child 若某个元素是其父元素唯一的子元素，则被匹配 集合元素 $(“ul li:only-child”)在&lt;ul&gt;中选取是唯一子元素的&lt;li&gt;元素 :nth-child()选择器功能如下：1、:nth-child(even)选择索引是偶数的元素2、:nth-child(2)选择索引是2的元素3、:nth-child(3n+1)选择索引是（3n+1）的元素，n从1开始 表单过滤选择器 选择器 描述 返回 示例 :enabled 选取所有可用元素 集合元素 $(“#form1 :enabled”) :disabled 选取所有不可用元素 集合元素 $(“#form1 :disabled”) :checked 选取所有被选中元素，单选，复选 集合元素 $(“input:checked”) :selected 选取所有被选中选项元素，下来列表 集合元素 $(“select option:selected”) 表单选择器 选择器 描述 返回 示例 :input 选取所有&lt;input&gt;&lt;textarea&gt;&lt;select&gt;&lt;button&gt; 集合元素 $(“:input”) :text 选取所有单行文本框 集合元素 $(“:text”) :password 选取所有密码框 集合元素 $(“:password”) :radio 选取所有单选框 集合元素 $(“:radio”) :checkbox 选取所有复选框 集合元素 $(“:checkbox”) :submit 选取所有提交按钮 集合元素 $(“:submit”) :image 选取所有图像按钮 集合元素 $(“:image”) :reset 选取重置按钮 集合元素 $(“:reset”) :button 选取所有按钮 集合元素 $(“:button”) :file 选取所有上传域 集合元素 $(“:file”) :hidden 选取所有不可见元素 集合元素 $(“:hidden”) 选择器中的注意事项1、选择器中含有&quot;.&quot;，&quot;#&quot;，&quot;(&quot;，&quot;]&quot;等特殊符号，需要转义，例：$(&quot;#id\\#b&quot;)2、属性选择器中的@符号需要去掉]]></content>
      <tags>
        <tag>书单</tag>
      </tags>
  </entry>
</search>
