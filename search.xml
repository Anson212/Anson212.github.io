<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>flex布局学习和总结</title>
      <link href="/2017/06/11/flex-conclusion/"/>
      <content type="html"><![CDATA[<p><img src="http://wx1.sinaimg.cn/mw690/e705ef49gy1fr6rtp2u0ej20jg0a8q30.jpg" alt="image">  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很长一段时间, 我知道有<code>flex</code>这个布局方式, 但是始终没有去学它.  </p><p>最近由于学习小程序，发现里面需要使用<code>flex</code>布局, 于是决定学习一下. </p><a id="more"></a> <p>在拜读了阮一峰的<code>flex</code>布局教程和<code>HaoyCn</code>有关<code>flex</code>属性的回答后整理成此文章，以便加深印象。  </p><h1 id="什么是flex"><a href="#什么是flex" class="headerlink" title="什么是flex"></a>什么是flex</h1><p><code>Flexbox Layout</code>，官方名为 <code>CSS Flexible Box Layout Module</code>, 意为”弹性布局”，是<code>CSS3</code>中引入的一种更加灵活高效的布局/对齐/排序方式(还有一种更适合大型布局的网格布局<code>CSS Grid Layout Module</code>). <code>flex</code>是<code>flexible</code>的缩写.  </p><p>任何一个容器都可以指定为<code>flex</code>布局。   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用<code>flex</code>布局。    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   display: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="flex的基本概念"><a href="#flex的基本概念" class="headerlink" title="flex的基本概念"></a>flex的基本概念</h1><p><img src="http://wx3.sinaimg.cn/mw690/e705ef49gy1fr6rtrno38j20fn099q2x.jpg" alt="image">     </p><p>1、采用<code>flex</code>布局的元素被称为<code>flex</code><strong>容器</strong><code>（flex container）</code>，他的子元素即为<code>flex</code>元素<code>（flex item）</code>。<br>2、<code>flex</code>容器中包含两个相互垂直的轴，即<strong>主轴</strong>（main axis）和<strong>副轴</strong><code>（cross axis)</code>。<br>3、flex元素沿主轴从<strong>主轴起点</strong> <code>(main start)</code>到<strong>主轴终点 </strong><code>(main end)</code>依次排布。<br>4、如果<code>flex</code>容器包含多行<code>flex</code>元素，则<code>flex</code>行<code>（flex lines）</code>沿<strong>副轴</strong>从<strong>副轴起点</strong><code>（cross start）</code>到<strong>副轴</strong>终点<code>（cross end)</code>依次排布。<br>5、单个<code>flex</code>元素占据的主轴空间叫做<strong>主轴程度</strong><code>（main size）</code>，占据的副轴空间叫做<strong>副轴</strong>长度<code>（cross size）</code>。   </p><h1 id="flex的兼容性"><a href="#flex的兼容性" class="headerlink" title="flex的兼容性"></a>flex的兼容性</h1><p><img src="http://wx2.sinaimg.cn/mw690/e705ef49gy1fr6rtmivtxj20oz08tt8w.jpg" alt="image"></p><h1 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h1><h2 id="用于flex容器的属性"><a href="#用于flex容器的属性" class="headerlink" title="用于flex容器的属性"></a>用于flex容器的属性</h2><p>以下6个属性设置在容器上    </p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>flex-direction</td><td>主轴方向</td></tr><tr><td>flex-wrap</td><td>换行样式</td></tr><tr><td>flex-flow</td><td>前两个的简写形式</td></tr><tr><td>justify-content</td><td>主轴对齐方式</td></tr><tr><td>align-items</td><td>单行的副轴对齐方式</td></tr><tr><td>align-content</td><td>多行的副轴对齐方式</td></tr></tbody></table><p>注意：<br><code>flex</code>容器的<code>column-*</code>属性会失效。<br><code>flex</code>容器无法拥有<code>::first-line</code>和 <code>::first-letter</code>虚元素。   </p><h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><p><code>flex-direction</code> 属性决定主轴方向(即项目的排序方向)。</p><table><thead><tr><th>含义</th><th>主轴方向</th></tr></thead><tbody><tr><td>可选值</td><td>row 、row-reverse 、 column 、 column-reverse</td></tr><tr><td>默认值</td><td>row</td></tr><tr><td>row</td><td>主轴为水平方向，七点在左端。</td></tr><tr><td>row-reverse</td><td>主轴为水平方向，起点在右端。</td></tr><tr><td>column</td><td>主轴为垂直方向，起点在上沿。</td></tr><tr><td>column-reverse</td><td>主轴为垂直方向，起点在下沿。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-direction: row  | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://wx3.sinaimg.cn/mw690/e705ef49gy1fr6rrngejwj20m405na9z.jpg" alt="image"> </p><h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><p><img src="http://wx2.sinaimg.cn/mw690/e705ef49gy1fr6rrqtow0j20m607oa9u.jpg" alt="image"> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取三个值    </p><p>（1）<code>nowrap</code>（默认）：不换行。<br><img src="http://wx4.sinaimg.cn/mw690/e705ef49gy1fr6rrv0y5kj20jg041aam.jpg" alt="image"> </p><p>（2）<code>wrap</code>：换行，第一行在上方。<br><img src="http://wx3.sinaimg.cn/mw690/e705ef49gy1fr6rs0gd29j20jg04x3yv.jpg" alt="image">  </p><p>（3）<code>wrap-reverse</code>：换行，第一行在下方。<br> <img src="http://wx4.sinaimg.cn/mw690/e705ef49gy1fr6rsrbag8j20jg04xmxf.jpg" alt="image"></p><h2 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h2><p><code>flex-flow</code>属相是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为 <code>row nowrap</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  flex-flow:&lt;flex-direction&gt;||&lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><p>它可能取5个值，具体对齐方式与轴的方向有关，下面假设主轴为从左到右。    </p><table><thead><tr><th>值</th><th>主轴方向</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值：左对齐</td></tr><tr><td>flex-end</td><td>右对齐</td></tr><tr><td>center</td><td>居中</td></tr><tr><td>space-between</td><td>两端对齐，项目之间的间隔都相等。</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间比项目与边框的间隔大一倍。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://wx3.sinaimg.cn/mw690/e705ef49gy1fr6rzg85qzj20hp0l70sn.jpg" alt="image">  </p><h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。<br>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。   </p><table><thead><tr><th>值</th><th>主轴方向</th></tr></thead><tbody><tr><td>flex-start</td><td>交叉轴的起点对齐。</td></tr><tr><td>flex-end</td><td>交叉轴的终点对齐。</td></tr><tr><td>center</td><td>交叉轴的中点对齐。</td></tr><tr><td>baseline</td><td>项目的第一行文字的基线对齐。</td></tr><tr><td>stretch</td><td>（默认值）:如果项目未设置高度或设为<code>auto</code>，将占满整个容器的高度。   </td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  align-items: flex-start  |  flex-end  |  center  |  baseline | stretch; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="http://wx4.sinaimg.cn/mw690/e705ef49gy1fr6rt1psdoj20h50lu3yg.jpg" alt="image">  </p><h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br>该属性可能取6个值。</p><table><thead><tr><th>值</th><th>主轴方向</th></tr></thead><tbody><tr><td>flex-start</td><td>与交叉轴的起点对齐。</td></tr><tr><td>flex-end</td><td>与交叉轴的终点对齐。</td></tr><tr><td>center</td><td>与交叉轴的中点对齐。</td></tr><tr><td>space-between</td><td>与交叉轴两端对齐。轴线之间的间隔平均分布。</td></tr><tr><td>space-around</td><td>每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</td></tr><tr><td>stretch</td><td>（默认值）：轴线占满整个交叉轴。      </td></tr></tbody></table><p><img src="http://wx3.sinaimg.cn/mw690/e705ef49gy1fr6rt52wmlj20h80lu0so.jpg" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用于flex元素的属性"><a href="#用于flex元素的属性" class="headerlink" title="用于flex元素的属性"></a>用于flex元素的属性</h1><p>这类属性有6种，分别为:</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>order</td><td>排列顺序。</td></tr><tr><td>align-self</td><td>flex元素的副轴对齐方式，对应与flex容器的<code>align-items</code>。</td></tr><tr><td>flex-grow</td><td>放大比例。</td></tr><tr><td>flex-shrink</td><td>缩小比例。</td></tr><tr><td>flex-basis</td><td>初始大小。</td></tr><tr><td>flex</td><td>（上面三个的简写形式。）</td></tr></tbody></table><p><strong>注意：</strong><code>flex</code>元素的 <code>float</code>，<code>clear</code>和<code>vertical-align</code>会失效。</p><h2 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h2><p><code>order</code>属性定义项目的排序顺序。数值越小，排列越靠前，默认为0.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   order:&lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://wx3.sinaimg.cn/mw690/e705ef49gy1fr6rt88u8fj20kv0dca9v.jpg" alt="image"></p><h2 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h2><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   align-self:&#123; auto | flex-start | flex-end | center | baseline | stretch &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://wx1.sinaimg.cn/mw690/e705ef49gy1fr6rrgu861j20kn0aua9w.jpg" alt="image"></p><h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h2><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-grow:&lt;number&gt;; /*default 0*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://wx4.sinaimg.cn/mw690/e705ef49gy1fr6rtjbdmsj20ma05v3yf.jpg" alt="image"></p><h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h2><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，盖项目将缩小。<br><code>flex-shrink</code>为 0 则表示，即使<code>flex</code>容器空间不足，该<code>flex</code>元素也不缩小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-shrink:&lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://wx4.sinaimg.cn/mw690/e705ef49gy1fr6rtuhjc4j20jg041t8x.jpg" alt="image"></p><h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h2><table><thead><tr><th>含义</th><th>初始大小</th></tr></thead><tbody><tr><td>可选值</td><td>auto、<length>(非负值)。</length></td></tr><tr><td>默认值</td><td>auto。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flex-basis</code>定义了分配剩余空间之前<code>flex</code>元素的初始大小，可为长度值（如 20%，5rem等）或 <code>auto</code>等关键词。<br><code>flex-basis: auto</code>表示, 以<code>flex</code>元素的主轴长度为<code>flex-basis</code>. 若flex元素的主轴长度也是<code>auto</code>, 则以<code>flex</code>元素内容(即所有子元素)的大小为<code>flex-basis</code>。</p><h2 id="flex属性-1"><a href="#flex属性-1" class="headerlink" title="flex属性"></a>flex属性</h2><table><thead><tr><th>含义</th><th><code>flex-grow</code>, <code>flex-shrink</code>和<code>flex-basis</code>的简写形式</th></tr></thead><tbody><tr><td>可选值</td><td>none [ &lt;‘flex-grow’&gt; &lt;‘flex-shrink’&gt;?、&lt;‘flex-basis’&gt; ]</td></tr><tr><td>默认值</td><td>0 1 auto</td></tr></tbody></table><ul><li>||用来分割两个或多个选项, 从中选取一个或多个, 不限次序.</li><li>|用来分割两个或多个选项, 从中选取一个.</li><li>[]只是用来分组的.</li><li>?代表可选.</li></ul><p>举例来说, a | [ b || c ]包含的可能情况有a, b, c, b c, c b.<br>现在回过头来再看<code>none</code> | [ &lt;‘flex-grow’&gt; &lt;‘flex-shrink’&gt;? || &lt;‘flex-basis’&gt; ]就清晰多了.<br>注意, <code>none</code>是一个特殊值, 相当于<code>0 0 auto</code>.<br>另外, 如果<code>flex</code>中不指定:</p><ul><li><code>flex-grow</code>成员, 则<code>flex-grow</code>会被置为1.</li><li><code>flex-shrink</code>成员, 则<code>flex-shrink</code>会被置为1.</li><li><code>flex-basis</code>成员, 则flex-basis会被置为0.<br>注意: <code>flex</code>的初始值是0 1 auto, 即由每个<code>flex</code>因子本身的默认值组成(比方说<code>flex-grow</code>的默认值就是0).</li></ul>]]></content>
      
      <categories>
          
          <category> 技术类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【读书】《锋利的jQuery》</title>
      <link href="/2017/03/10/sharp-jquery/"/>
      <content type="html"><![CDATA[<p><img src="http://img2.ph.126.net/gh8wpGh_wfYoVg5wcB5I4w==/3042181548388979240.jpg" alt="image"></p><p>通过对《锋利的jQuery》（第二版）一书的学习，发现此书讲解通俗易懂，是学习jQuery的一本很好的指导书，特作如下总结。此书主要讲解了jQuery的常用操作，包括认识jQuery，jQuery选择器，jQuery中的DOM操作，jQuery中的事件和动画，jQuery对表单、表格的操作及更多应用，jQuery与Ajax的应用等。</p><a id="more"></a><h1 id="jQuery的优势"><a href="#jQuery的优势" class="headerlink" title="jQuery的优势"></a>jQuery的优势</h1><p>jQuery强调的理念是写得少，做的多。jQuery独特的选择器、链式操作、事件处理机制和封装完善的<br>Ajax都是其他JavaScript库望尘莫及的。概括起来，jQuery有以下优势。   </p><ul><li>轻量级   </li><li>强大的选择器   </li><li>出色的DOM操作   </li><li>可靠的事件处理机制   </li><li>完善的Ajax  </li><li>不污染顶级变量  </li><li>出色的浏览器兼容性，支持IE6.0+、Firefox3.6+、Safari5.0+、Opera、Chrome  </li><li>链式操作方式  </li><li>隐式迭代  </li><li>行为层与结构层的分离  </li><li>丰富的插件支持  </li><li>完善的文档  </li><li>开源  </li></ul><h1 id="jQuery代码的编写"><a href="#jQuery代码的编写" class="headerlink" title="jQuery代码的编写"></a>jQuery代码的编写</h1><p>在<code>jQuery</code>库中，$就是jQuery的一个简写形式，例如<code>$(&quot;#foo&quot;)</code>和<code>jQuery(&quot;#foo&quot;)</code>是等价的。<br>规范：<br>1、对于同一个对象不超过3个操作的，可以直接写在一行<br>2、对于同一个对象的较多操作，建议每行写一个操作<br>3、对于多个对象的少量操作，可以每个对象写一行，涉及子元素的，可以考虑缩进<br><strong>建议</strong>：<code>jQuery</code>对象使用$开头，例：<code>var $variable = jQuery</code>对象，<code>var variable= DOM</code>对象  </p><center><strong><code>window.onload</code> 和 <code>$(document).ready()</code> 对比</strong></center><table><thead><tr><th>-</th><th>window.onload</th><th>$(document).ready()  </th></tr></thead><tbody><tr><td>执行时间</td><td>必须等待网页中所有的内容加载完毕（）包括图片才执行</td><td>只需要 <code>DOM</code> 加载完就执行（不包括图片等）</td></tr><tr><td>编写个数</td><td>不能同时编写多个</td><td>能同时编写多个</td></tr><tr><td>简化写法</td><td>无</td><td><code>$(document).ready(function(){})</code> 可以简写成 <code>$(function(){})</code></td></tr></tbody></table><h2 id="jQuery-的链式操作风格"><a href="#jQuery-的链式操作风格" class="headerlink" title="jQuery 的链式操作风格"></a>jQuery 的链式操作风格</h2><p>用过jQuery的朋友都知道他强大的链式操作，方便，简洁，易于理解， 如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>).next().show().parent().siblings().children(<span class="string">"a"</span>).removeClass(<span class="string">"current"</span>).next().hide();</span><br></pre></td></tr></table></figure></p><p>为了进一步改善代码的可读性和可维护性可将代码改为如下格式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>)    <span class="comment">// 给当前元素添加 "current" 样式     </span></span><br><span class="line">.next().show()                        <span class="comment">// 下一个元素显示    </span></span><br><span class="line">.parent().siblings().children(<span class="string">"a"</span>).removeClass(<span class="string">"current"</span>)   <span class="comment">// 父元素的同辈元素的子元素 &lt;a&gt; 移除 "current" 样式</span></span><br><span class="line">.next().hide();                <span class="comment">//他们的下一个元素隐藏</span></span><br></pre></td></tr></table></figure></p><h2 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h2><p><code>DOM</code>对象就是<code>DOM</code>树中的节点。可以通过<code>JavaScript</code>中的<code>getElementsByTagName</code>或者<code>getElementById</code>来获取元素节点。   </p><p><code>jQuery</code>对象就是通过<code>jQuery</code>包装<code>DOM</code>对象后产生的对象。   </p><p>在<code>jQuery</code>对象中违法使用<code>DOM</code>对象的任何方法。同样，<code>DOM</code>对象也不能使用<code>jQuery</code>里的方法。  </p><p>所以我们要区分什么是JavaScript原生方法，什么是<code>jQuery</code>方法。 </p><p>以下是都是错误的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).innerHTML;</span><br><span class="line">$(<span class="string">"#id"</span>).checked;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).html();</span><br></pre></td></tr></table></figure></p><h2 id="jQuery对象和DOM对象的相互转换"><a href="#jQuery对象和DOM对象的相互转换" class="headerlink" title="jQuery对象和DOM对象的相互转换"></a>jQuery对象和DOM对象的相互转换</h2><p>在讨论<code>jQuery</code>对象和<code>DOM</code>对象的相互转换之前，先约定好定义变量的风格，如果获取的对象时<code>jQuery</code>对象，那么在变量前面加上<code>$</code>符号。  </p><h3 id="jQuery-对象转化为-DOM-对象"><a href="#jQuery-对象转化为-DOM-对象" class="headerlink" title="jQuery 对象转化为 DOM 对象"></a>jQuery 对象转化为 DOM 对象</h3><p><code>jQuery</code>对象不能使用DOM中的方法，<code>jQuery</code>提供了两种方法将一个<code>jQuery</code>对象转换DOM对象，即<code>[index]</code>和<code>get（index）</code>。</p><p>（1）<code>jQuery</code>对象是一个类似数组的对象，可以通过<code>[index]</code>得到相应<code>DOM</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $cr = $(<span class="string">"#cr"</span>);     <span class="comment">//jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> cr = $cr[<span class="number">0</span>];        <span class="comment">//将jQuery对象转为DOM对象</span></span><br><span class="line"><span class="built_in">console</span>.log(cr);        <span class="comment">//查看是否转换成功</span></span><br></pre></td></tr></table></figure><p>（2）通过<code>get(index)</code>得到。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $cr = $(<span class="string">"#cr"</span>);     <span class="comment">//jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> cr = $cr.get(<span class="number">0</span>);    <span class="comment">//DOM对象</span></span><br><span class="line"><span class="built_in">console</span>.log(cr);        <span class="comment">//查看是否转换成功</span></span><br></pre></td></tr></table></figure></p><h3 id="DOM-对象转化为-jQuery-对象"><a href="#DOM-对象转化为-jQuery-对象" class="headerlink" title="DOM 对象转化为 jQuery 对象"></a>DOM 对象转化为 jQuery 对象</h3><p>只需要使用<code>$()</code>将<code>DOM</code>对象包装起来即可得到<code>jQuery</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cr = <span class="built_in">document</span>.getElementById(<span class="string">"cr"</span>);          <span class="comment">//DOM对象</span></span><br><span class="line"><span class="keyword">var</span> $cr = $(cr);                                 <span class="comment">//将DOM对象转换jQuery对象</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：<code>DOM</code>对象只能使用<code>DOM</code>方法，<code>jQuery</code>对象只能使用<code>jQuery</code>的方法。</p><h3 id="解决-jQuery-和其他库的冲突"><a href="#解决-jQuery-和其他库的冲突" class="headerlink" title="解决 jQuery 和其他库的冲突"></a>解决 jQuery 和其他库的冲突</h3><p>在 <code>jQuery</code> 库中，几乎所有的插件都被限制在它的命名空间里。通常，全局对象都被很好地储存在 <code>jQuery</code> 的命名空间里。因此和其他库一起使用时，不会引起冲突。<br><strong>注</strong>：默认情况下，<code>jQuery</code>用<code>$</code>作为自身的快捷方式。</p><p>1、jQuery库在其他库之后导入 </p><p><strong>（1）在其他库和<code>jQuery</code>库加载完毕之后，可以在任何时候调用<code>jQuery.noConflict()</code>函数将变量$的控制权移交其他的<code>JavaScript</code>库。</strong><br><strong>例</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入prototype库 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"lib/prototype.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入jQuery库 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"lib/jQuery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    jQuery.noConflict();    <span class="comment">//将变量$的控制权移交给prototype.js</span></span><br><span class="line">    jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      <span class="comment">//使用jQuery</span></span><br><span class="line">        jQuery(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(jQuery(<span class="keyword">this</span>).text());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>; <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>（2）想确保jQuery不与其他库冲突，又想自定义快捷方式</strong>：<br><strong>例</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> $j = jQuery.noConflict();   <span class="comment">//自定义快捷方式</span></span><br><span class="line">    $j(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                  <span class="comment">//使用jQuery，利用自定义快捷方式  $j</span></span><br><span class="line">        $j(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert.($j(<span class="keyword">this</span>).text());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>; <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>（3）如果你还想继续使用 $ 而不管其他函数的 $() 方法，同时又不想与其他库冲突，那么你可以</strong><br>其一、<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    jQuery.noConflict();                 <span class="comment">//将变量$的控制权移交给prototype.js</span></span><br><span class="line">    jQuery(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;                  <span class="comment">//使用jQuery设定页面加载时执行的函数</span></span><br><span class="line">        $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;         <span class="comment">//函数内部继续使用$()</span></span><br><span class="line">            alert.($(<span class="keyword">this</span>).text());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>;      <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>其二、<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    jQuery.noConflict();                 <span class="comment">//将变量$的控制权移交给prototype.js</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;                        <span class="comment">//定义匿名函数</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                    <span class="comment">//匿名函数内部的$均为jQuery</span></span><br><span class="line">            $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert.($(<span class="keyword">this</span>).text());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(jQuery);                          <span class="comment">//执行匿名函数且传递实参jQuery</span></span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>;      <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、jQuery在其他库之前导入  </p><p>直接使用jQuery而非$来做jQuery的工作，$()方法作为其他库的快捷方式，无需调用jQuery.noConflict()方法</p><h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><h2 id="jQuery选择器的优势"><a href="#jQuery选择器的优势" class="headerlink" title="jQuery选择器的优势"></a>jQuery选择器的优势</h2><p>1、简洁的写法<br>使用<code>$(&quot;#ID&quot;)</code>代替<code>document.getElementById()</code>，使用<code>$(&quot;tagName&quot;)</code>代替<code>document.getElementsByTagName()</code>函数<br>2、支持<code>CSS1</code>到<code>CSS3</code>选择器<br>3、完善的处理机制，即，使用<code>jQuery</code>获取不存在的元素也不会报错 </p><p><strong>注</strong>：<code>$(&quot;#tt&quot;)</code>获取的永远是对象，即使网页上没有元素，因此当要使用jQuery检查某个元素在网页上是否存在，不能使用如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($(<span class="string">"#tt"</span>))&#123;   <span class="comment">/* do something */</span>   &#125;</span><br><span class="line">应根据获取的元素长度来判断：</span><br><span class="line"><span class="keyword">if</span>($(<span class="string">"#tt"</span>).length &gt; <span class="number">0</span>)&#123;   <span class="comment">/* do something */</span>   &#125;</span><br><span class="line">或转换成DOM对象：</span><br><span class="line"><span class="keyword">if</span>($(<span class="string">"#tt"</span>)[<span class="number">0</span>])&#123;   <span class="comment">/* do something */</span>   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>#id</td><td>根据给定id匹配一个元素</td><td>单个元素</td><td>$(“#test”)选取id为test的元素</td></tr><tr><td>.class</td><td>根据给定类名匹配元素</td><td>集合元素</td><td>$(“.test”)选取所有class为test的元素</td></tr><tr><td>element</td><td>根据给定元素名匹配元素</td><td>集合元素</td><td>$(“p”)</td></tr><tr><td>*</td><td>匹配所有元素</td><td>集合元素</td><td>$(“*”)</td></tr><tr><td>selector1,selector2…</td><td>将每个选择器匹配到的元素合并后一起返回</td><td>集合元素</td><td>$(“div,span,p.myClass”)</td></tr></tbody></table><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>$(“ancestor descendant”)</td><td>选取ancestor元素里所有descendant（后代）元素</td><td>集合元素</td><td>$(“div span”)选取div里所有span元素</td></tr><tr><td>$(“parent&gt;child”)</td><td>与CSS的子选择器一样</td><td>集合元素</td><td>$(“div&gt;span”)</td></tr><tr><td>$(“prev+next”)</td><td>与CSS的相邻同胞选择器一样</td><td>集合元素</td><td>$(“.one+div”)</td></tr><tr><td>$(“prev~sibling”)</td><td>与CSS的通用的同胞组合选择器一样</td><td>集合元素</td><td>$(“#two~div”)</td></tr></tbody></table><p>可以使用<code>next()</code>方法代替<code>$(&#39;prev+next&#39;)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".one+div"</span>);  ==&gt; $(<span class="string">".one"</span>).next(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></p><p>使用<code>nextAll()</code>代替<code>$(&#39;#prev~sibling&quot;)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#prev~div"</span>); ==&gt; $(<span class="string">"#prev"</span>).nextAll(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:first</td><td>选取第一个元素</td><td>单个元素</td><td>$(“div:first”)选取所有<div>元素中第1个<div>元素</div></div></td></tr><tr><td>:last</td><td>选取最后一个元素</td><td>单个元素</td><td>$(“div:last”)解释类似:first</td></tr><tr><td>:not(selector)</td><td>去除所有与给定选择器匹配的元素</td><td>集合元素</td><td>$(“input:not(.myClass)”)</td></tr><tr><td>:even</td><td>选取索引是偶数的元素，索引从0开始</td><td>集合元素</td><td>$(“input:even”)</td></tr><tr><td>:odd</td><td>选取索引是奇数的元素，索引从0开始</td><td>集合元素</td><td>$(“input:odd”)</td></tr><tr><td>:eq(index)</td><td>选取索引是index的元素，index从0开始</td><td>单个元素</td><td>$(“input:eq(1)”)</td></tr><tr><td>:gt(index)</td><td>选取索引大于index的元素，index从0开始</td><td>集合元素</td><td>$(“input:gt(1)”)</td></tr><tr><td>:lt(index)</td><td>r选取索引小于index的元素，index从0开始</td><td>集合元素</td><td>$(“input:lt(1)”)</td></tr><tr><td>:header</td><td>选取所有标题元素，例h1，h2</td><td>集合元素</td><td>$(“:header”)</td></tr><tr><td>:animated</td><td>选取正在执行动画的元素</td><td>集合元素</td><td>$(“div:animated”)</td></tr><tr><td>:focus</td><td>选取获得焦点的元素</td><td>集合元素</td><td>$(“:focus”)</td></tr></tbody></table><h2 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:contains(text)</td><td>选取含有文本内容为“text”的元素</td><td>集合元素</td><td>$(“div:contains(‘me’)”)选取所有含有文本”me”的div元素</td></tr><tr><td>:empty</td><td>选取不包含子元素或文本的空元素</td><td>集合元素</td><td>$(“div:empty”)</td></tr><tr><td>:has(selector)</td><td>选取含有选择器所匹配的元素的元素</td><td>集合元素</td><td>$(“div:has(p)”)选取含有p元素的div元素</td></tr><tr><td>:parent</td><td>选取含有子元素或文本元素的元素</td><td>集合元素</td><td>$(“div:parent”)</td></tr></tbody></table><h2 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:hidden</td><td>选取所有不可见元素</td><td>集合元素</td><td>$(“:hidden”)选取所有不可见元素</td></tr><tr><td>:visible</td><td>选取所有可见元素</td><td>集合元素</td><td>$(“div:visible”)选取可见的div元素</td></tr></tbody></table><h2 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>[attribute]</td><td>选择拥有此属性的元素</td><td>集合元素</td><td>$(“div[id]”)选取拥有id属性的div元素</td></tr><tr><td>[attribute=value]</td><td>选择拥有属性值为value的元素</td><td>集合元素</td><td>$(“div[title=test]”)</td></tr><tr><td>[attribute!=value]</td><td>选择属性值不等于value的元素</td><td>集合元素</td><td>$(“div[title!=test]”),没有属性title的元素也会被选取</td></tr><tr><td>[attribute^=value]</td><td>选择属性值以value开始的元素</td><td>集合元素</td><td>$(“div[title^=test]”)</td></tr><tr><td>[attribute$=value]</td><td>选择属性值以value结束的元素</td><td>集合元素</td><td>$(“div[title$=test]”)</td></tr><tr><td>[attribute*=value]</td><td>选择属性值含有value的元素</td><td>集合元素</td><td>$(“div[title*=test]”)</td></tr><tr><td>[attribute丨=value]</td><td>选择属性等于给定字符串或以该字符串为前缀（该字符串后跟一个连字符‘-’）的元素</td><td>集合元素</td><td>$(“div[title丨=”en”]”)选取title属性等于en或以en为前缀的元素</td></tr><tr><td>[attribute~=value]</td><td>选取属性用空格分隔的值中包含一个给定值的元素</td><td>集合元素</td><td>$(“div[title~=”uk”]”)</td></tr><tr><td>[attribute1][attribute2] …</td><td>用属性选择器合并成复合选择器，满足多个条件，缩小范围</td><td>集合元素</td><td>$(“div[id][title$=”test”]”)选取拥有属性id并且属性title以”test”结束的div元素</td></tr></tbody></table><h2 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:nth-child<code>(index/even/odd/equatioin)</code></td><td>选取每个父元素下第index个子元素或奇偶元素，index从1开始</td><td>集合元素</td><td>将为每一个父元素匹配子元素</td></tr><tr><td>:first-child</td><td>选取每个父元素的第一个子元素</td><td>集合元素</td><td>将为每一个父元素匹配子元素</td></tr><tr><td>:last-child</td><td>选取每个父元素的最后一个子元素</td><td>集合元素</td><td>将为每一个父元素匹配子元素</td></tr><tr><td>:only-child</td><td>若某个元素是其父元素唯一的子元素，则被匹配</td><td>集合元素</td><td>$(“ul li:only-child”)在<code>&lt;ul&gt;</code>中选取是唯一子元素的<code>&lt;li&gt;</code>元素</td></tr></tbody></table><p><code>:nth-child()</code>选择器功能如下：<br>1、<code>:nth-child(even)</code>选择索引是偶数的元素<br>2、<code>:nth-child(2)</code>选择索引是2的元素<br>3、<code>:nth-child(3n+1)</code>选择索引是<code>（3n+1）</code>的元素，<code>n</code>从1开始  </p><h2 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:enabled</td><td>选取所有可用元素</td><td>集合元素</td><td>$(“#form1 :enabled”)</td></tr><tr><td>:disabled</td><td>选取所有不可用元素</td><td>集合元素</td><td>$(“#form1 :disabled”)</td></tr><tr><td>:checked</td><td>选取所有被选中元素，单选，复选</td><td>集合元素</td><td>$(“input:checked”)</td></tr><tr><td>:selected</td><td>选取所有被选中选项元素，下来列表</td><td>集合元素</td><td>$(“select option:selected”)</td></tr></tbody></table><h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:input</td><td>选取所有<code>&lt;input&gt;&lt;textarea&gt;&lt;select&gt;&lt;button&gt;</code></td><td>集合元素</td><td>$(“:input”)</td></tr><tr><td>:text</td><td>选取所有单行文本框</td><td>集合元素</td><td>$(“:text”)</td></tr><tr><td>:password</td><td>选取所有密码框</td><td>集合元素</td><td>$(“:password”)</td></tr><tr><td>:radio</td><td>选取所有单选框</td><td>集合元素</td><td>$(“:radio”)</td></tr><tr><td>:checkbox</td><td>选取所有复选框</td><td>集合元素</td><td>$(“:checkbox”)</td></tr><tr><td>:submit</td><td>选取所有提交按钮</td><td>集合元素</td><td>$(“:submit”)</td></tr><tr><td>:image</td><td>选取所有图像按钮</td><td>集合元素</td><td>$(“:image”)</td></tr><tr><td>:reset</td><td>选取重置按钮</td><td>集合元素</td><td>$(“:reset”)</td></tr><tr><td>:button</td><td>选取所有按钮</td><td>集合元素</td><td>$(“:button”)</td></tr><tr><td>:file</td><td>选取所有上传域</td><td>集合元素</td><td>$(“:file”)</td></tr><tr><td>:hidden</td><td>选取所有不可见元素</td><td>集合元素</td><td>$(“:hidden”)</td></tr></tbody></table><p><strong>选择器中的注意事项</strong><br>1、选择器中含有<code>&quot;.&quot;</code>，<code>&quot;#&quot;</code>，<code>&quot;(&quot;，&quot;]&quot;</code>等特殊符号，需要转义，例：<code>$(&quot;#id\\#b&quot;)</code><br>2、属性选择器中的<code>@</code>符号需要去掉   </p>]]></content>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
