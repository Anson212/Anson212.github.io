<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Vue组件开发学习(二)之slot(插槽)</title>
      <link href="/2019/07/14/vue/vue%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0(%E4%BA%8C)%E4%B9%8Bslot(%E6%8F%92%E6%A7%BD)/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/vue.jpg?raw=true" alt="image"></p><h1 id="vue中的slot-插槽"><a href="#vue中的slot-插槽" class="headerlink" title="vue中的slot(插槽)"></a>vue中的slot(插槽)</h1><p><strong>个人理解：</strong><br>是对组件的扩展，通过<code>slot</code>插槽向组件内部指定位置传递内容，通过<code>slot</code>可以父子传参；<br><strong>slot的通俗理解</strong><br>是“占坑”，在组件模板中占好了位置，当使用该组件标签时候，组件标签里面的内容就会自动填坑(替换组件模板中<code>&lt;slot&gt;</code>位置)，当插槽也就是坑<code>&lt;slot name=”mySlot”&gt;</code>有命名时，组件标签中使用属性<code>slot=”mySlot”</code>的元素就会替换该对应位置内容；   </p><a id="more"></a><h1 id="为什么使用slot"><a href="#为什么使用slot" class="headerlink" title="为什么使用slot"></a>为什么使用slot</h1><ul><li>组件的插槽：<ul><li>组件的插槽是为了让我们封装的组件更加具有扩展性。</li><li>让使用者可以决定组件内部的一些内容到底展示了什么。</li></ul></li><li>例子: 移动网站中的导航栏。<ul><li>移动开发中，几乎每个页面都有导航栏。</li><li>导航栏我们必然会封装成一个插件，比如<code>nav-bar</code>组件。</li><li>一旦有了这个组件，我们就可以在多个页面中复用了。</li></ul></li><li>但是，每个页面的导航都是不一样的，以京东<code>M</code>站为例</li></ul><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/slot.png?raw=true" alt="image"></p><h2 id="如何封装这类组件呢？"><a href="#如何封装这类组件呢？" class="headerlink" title="如何封装这类组件呢？"></a>如何封装这类组件呢？</h2><ul><li>如何去封装这类的组件呢？<ul><li>它们也有很多区别，但是也有很多共性。</li><li>如果我们每一个单独去封装一个组件，显然不合适，比如每个页面都返回，这部分内容我们就要重复去封装。</li><li>但是，如果我们封装成一个，好像也不合理：有些左侧是菜单，有些是返回，有些中间是搜索，有些是文字，等等。</li></ul></li><li>如何封装合适呢？抽取共性，保留不同。<ul><li>最好的封装方式就是将共性抽取到组件中，将不同暴露为插槽。</li><li>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容。</li><li>是搜索框，还是文字，还是菜单。由调用者自己来决定。</li></ul></li><li>这就是为什么我们要学习组件中的插槽<code>slot</code>的原因。</li></ul><h1 id="slot-基本使用"><a href="#slot-基本使用" class="headerlink" title="slot 基本使用"></a>slot 基本使用</h1><ul><li>如何使用<code>slot</code>？<ul><li>在子组件中，使用特殊的元素<code>&lt;slot&gt;</code>就可以为子组件开启一个插槽。</li><li>该插槽插入什么内容取决于父组件如何使用。</li></ul></li><li>通过一个简单的例子，来给子组件定义一个插槽：<ul><li><code>&lt;slot&gt;</code>中的内容表示，如果没有在该组件中插入任何其他内容，就默认该内容。</li><li>有了这个插槽后，父组件如何使用呢？请看下面的例子。</li></ul></li></ul><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/slot01.png?raw=true" alt="image"><img src="https://github.com/Anson212/magentoWeb/blob/master/img/slot02.png?raw=true" alt="image"></p><h1 id="具名插槽slot"><a href="#具名插槽slot" class="headerlink" title="具名插槽slot"></a>具名插槽slot</h1><ul><li>当子组件的功能复杂时，子组件的插槽可能并非是一个。<ul><li>比如我们封装一个导航栏的子组件，可能就需要三个插槽，分别代表左边、中间、右边。</li><li>那么，外面在给插槽插入内容的时候，如何区分插入的是哪一个呢？</li><li>这个时候就需要给插槽起一个名字。</li></ul></li><li>如何使用具名插槽呢？<ul><li>非常简单，只需要给<code>slot</code>元素一个<code>name</code>属性即可。</li><li><code>&lt;slot name=&quot;myslot&quot;&gt;&lt;/slot&gt;</code></li></ul></li><li>结合案例 简单理解具名插槽的用法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;cpn&gt;&lt;span slot="center"&gt;标题&lt;/span&gt;&lt;/cpn&gt;</span><br><span class="line">&lt;cpn&gt;&lt;span slot="left"&gt;返回&lt;/span&gt;&lt;/cpn&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;template id="cpn"&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">&lt;slot name="left"&gt;&lt;span&gt;左边&lt;/</span>span&gt;&lt;/slot&gt;</span><br><span class="line">&lt;slot name=<span class="string">"center"</span>&gt;&lt;span&gt;中间&lt;/span&gt;&lt;/slot&gt;</span><br><span class="line">&lt;slot name=<span class="string">"right"</span>&gt;&lt;span&gt;右边&lt;/span&gt;&lt;/slot&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">components:&#123;</span><br><span class="line">cpn:&#123;</span><br><span class="line">template:<span class="string">"#cpn"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="编译作用域"><a href="#编译作用域" class="headerlink" title="编译作用域"></a>编译作用域</h1><ul><li>在真正学习插槽之前，需要先理解一个概念：编译作用域。</li><li>官方对于编译的作用域解析比较简单，我们来通过一个例子来理解这个概念。</li><li>考虑下面的代码是否最终可以渲染出来：<ul><li><code>&lt;my-cpn v-show=&quot;isShow&quot;&gt;&lt;/my-cpn&gt;</code>,我们使用了<code>isShow</code>属性。</li><li><code>isShow</code>属性包含在组件中，也包含在<code>Vue</code>实例中。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;my-cpn v-show=<span class="string">"isShow"</span>&gt;&lt;/my-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=<span class="string">"myCpn"</span>&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;我能不能显示出来呢&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">const app = new Vue(&#123;</span></span><br><span class="line">el:"#app",</span><br><span class="line">data:&#123;</span><br><span class="line">isShow:<span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">cpn:&#123;</span><br><span class="line">template:<span class="string">"#myCpn"</span>,</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">isShow: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>答案：最终是可以渲染出来的，也就是使用的是<code>Vue</code>实例的属性。</p></li><li><p>原因：</p><ul><li>官方给出了一条准则：<strong>父组件模本的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子组件作用域内编译。</strong></li><li>而我们在使用<code>&lt;my-cpn v-show=&quot;isShow&quot;&gt;&lt;/my-cpn&gt;</code>的时候，整个组件的使用过程是相当于在父组件中出现的。</li><li>那它的作用域就是父组件，使用的属性也是属于父组件的属性。</li><li>因此，<code>isShow</code>使用的是<code>Vue</code>实例中的属性，而不是子组件的属性。</li></ul></li></ul><h2 id="作用域插槽：准备"><a href="#作用域插槽：准备" class="headerlink" title="作用域插槽：准备"></a>作用域插槽：准备</h2><ul><li>作用域插槽是<code>slot</code>一个比较难理解的点。</li><li><p>这里，用一句话对其做一个总结，然后我们在后面的案例中体会：</p><ul><li>父组件替换插槽的标签，但是内容由子组件来提供。</li></ul></li><li><p>需求：</p><ul><li>子组件中包括一组数据，比如：<code>pLanguages: [&#39;JavaScript&#39;, &#39;C++&#39;, &#39;Java&#39;, &#39;C#&#39;, &#39;Python&#39;, &#39;Go&#39;, &#39;Swift&#39;]</code>。 </li><li>需要在多个界面进行展示：<ul><li>某些界面是以水平方向一一展示。</li><li>某些界面是以列表形式展示的。<br>某些界面直接展示一个数组</li></ul></li><li>在子组件，希望父组件告诉我们如何展示，那怎么办呢？<ul><li>利用<code>slot</code>作用域就可以了。</li></ul></li><li>看看子组件的定义：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;cpn&gt;&lt;/cpn&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;template id="cpn"&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">&lt;slot :data="pLanguages"&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;li v-for="item in pLanguages"&gt;&#123;&#123;item&#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>slot&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">components:&#123;</span><br><span class="line">cpn:&#123;</span><br><span class="line">template:<span class="string">"#cpn"</span>,</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">pLanguages: [<span class="string">'JavaScript'</span>, <span class="string">'C++'</span>, <span class="string">'Java'</span>, <span class="string">'C#'</span>, <span class="string">'Python'</span>, <span class="string">'Go'</span>, <span class="string">'Swift'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="作用域插槽：使用"><a href="#作用域插槽：使用" class="headerlink" title="作用域插槽：使用"></a>作用域插槽：使用</h2><ul><li>在父组件使用我们的子组件时，从子组件中拿到数据：<ul><li>我们通过<code>&lt;template slot-scope=&quot;slotProps&quot;&gt;</code>获取到<code>slotProps</code>属性。</li><li>再通过<code>slotProps.data</code>就可以获取到刚才我们传入的<code>data</code>了</li></ul></li><li>代码如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;cpn&gt;&lt;/cpn&gt;</span><br><span class="line">&lt;cpn&gt;</span><br><span class="line">&lt;!--目的是获取子组件中的pLanguages--&gt;</span><br><span class="line">&lt;template slot-scope=<span class="string">"slotProps"</span>&gt;</span><br><span class="line">&lt;span&gt;&#123;&#123;slotProps.data.join(<span class="string">' - '</span>)&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;<span class="regexp">/cpn&gt;</span></span><br><span class="line"><span class="regexp">&lt;cpn&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!--目的是获取子组件中的pLanguages--&gt;</span></span><br><span class="line"><span class="regexp">    &lt;template slot-scope="slotProps"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;!--&lt;span v-for="item in slot.data"&gt;&#123;&#123;item&#125;&#125; * &lt;/</span>span&gt;--&gt;</span><br><span class="line">      &lt;span&gt;&#123;&#123;slotProps.data.join(<span class="string">' * '</span>)&#125;&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>template&gt;</span><br><span class="line"> &lt;<span class="regexp">/cpn&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;template id=<span class="string">"cpn"</span>&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;slot :data=<span class="string">"pLanguages"</span>&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-<span class="keyword">for</span>=<span class="string">"item in pLanguages"</span>&gt;&#123;&#123;item&#125;&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line">&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">const app = new Vue(&#123;</span></span><br><span class="line">el:"#app",</span><br><span class="line">components:&#123;</span><br><span class="line">cpn:&#123;</span><br><span class="line">template:<span class="string">"#cpn"</span>,</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">pLanguages: [<span class="string">'JavaScript'</span>, <span class="string">'C++'</span>, <span class="string">'Java'</span>, <span class="string">'C#'</span>, <span class="string">'Python'</span>, <span class="string">'Go'</span>, <span class="string">'Swift'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>==总结：==</p><p>以上所述的是vue中组件化的理解，哪里有什么错误的欢迎指出修正， 希望对大家有所帮助！！！</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue组件化开发学习(一)</title>
      <link href="/2019/07/14/vue/vue%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0(%E4%B8%80)/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/vue.jpg?raw=true" alt="image"></p><h1 id="什么是组件化"><a href="#什么是组件化" class="headerlink" title="什么是组件化"></a>什么是组件化</h1><ul><li>人面对复杂问题的处理方式：<ul><li>任何一个人处理信息的逻辑能力都是有限的</li><li>所以，当面对一个非常复杂的问题时，我们不太可能一次性搞定一大堆的内容。</li><li>但是，我们人有一种天生的能力，就是将问题进行拆解。</li><li>将一个复杂的问题，拆分成很多个可以处理的小问题，再讲其放在整体当中，你就会发现大的问题也会迎刃而解。<a id="more"></a> </li></ul></li><li>组件化也是类似的思想：<ul><li>如果我们将一个野蛮中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。</li><li>但如果我们把一个页面拆分成一个个小的功能块，那每个功能块完成属于自己这部分独立的功能，那么之后整个页面的管理和维护就会变得非常容易了。</li></ul></li></ul><h1 id="Vue组件化思想"><a href="#Vue组件化思想" class="headerlink" title="Vue组件化思想"></a>Vue组件化思想</h1><ul><li>组件化是<code>vue.js</code>中的重要思想<ul><li>它提供了一种抽象，可以让我们开发出一个个独立可复用的小组件来构造我们的应用。</li><li>任何的应用都会抽象成一颗组件树。</li></ul></li></ul><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/vue-component.png?raw=true" alt="image"></p><ul><li>组件化思想的应用：<ul><li>有了组件化的思想，在之后的开发中就要充分的利用它。</li><li>尽可能的将页面拆分成一个个小的，可复用的组件。</li><li>这样让我们的代码更加方便组织和管理，并且扩展性也更强。</li></ul></li><li>组件是<code>Vue</code>开发中，非常重要的一个编章需要认真的学习。</li></ul><h1 id="注册成组件的基本步骤"><a href="#注册成组件的基本步骤" class="headerlink" title="注册成组件的基本步骤"></a>注册成组件的基本步骤</h1><ul><li>组件的使用分成三个步骤：<ul><li>创建组件构造器</li><li>注册组件</li><li>使用组件</li></ul></li></ul><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/vue-extend.png?raw=true" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!-<span class="number">-3.</span>使用组件--&gt;</span><br><span class="line">&lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//1.创建组件构造器对象</span></span><br><span class="line"><span class="keyword">const</span> myComponent = Vue.extend(&#123;</span><br><span class="line">template:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string"> &lt;h2&gt;组件标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string"> &lt;p&gt;我是组件中的一个段落内容&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//2.注册组件，并且定义组件标签的名称</span></span><br><span class="line">Vue.component(<span class="string">'my-cpn'</span>,myComponent)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="组件步骤解析"><a href="#组件步骤解析" class="headerlink" title="组件步骤解析"></a>组件步骤解析</h2><ul><li>上面代码的步骤都代表什么含义呢？</li><li><p>1.<code>Vue.extend()</code>:</p><ul><li>调用<code>Vue.extend()</code>创建的是一个组件构造器。</li><li>通常在创建组件构造器时，传入<code>template</code>代表我们自定义组件的模板。</li><li>该模板就是在使用到组件的地方，要显示的<code>HTML</code>代码。</li><li>事实上，这种写法在<code>Vue2.x</code>的文档中几乎已经看不到了，它会直接使用下面的<code>Vue.component()</code>这种方式，而且这种方式是学习<code>Vue.component()</code>这种方式的基础。</li></ul></li><li><p>2.<code>Vue.component()</code>:</p><ul><li>调用<code>Vue.component()</code>是将该刚才的组件构造器注册为一个组件，并给它起一个组件的标签名称。<br>所以需要传递两个参数：1、注册组件的标签名 2、组件构造器</li></ul></li><li><p>3.组件必须挂载在某个<code>Vue</code>实例下，否则它不会生效。</p></li></ul><h1 id="全局组件和局部组件"><a href="#全局组件和局部组件" class="headerlink" title="全局组件和局部组件"></a>全局组件和局部组件</h1><blockquote><ul><li>当我们通过调用<code>Vue.component()</code>注册组件时，组件的注册是全局的<ul><li>这意味着该组件可以在任意<code>Vue</code>示例下使用。</li></ul></li><li>如果我们注册的组件是挂载在某个实例中，那么就是一个局部组件</li></ul></blockquote><p><strong>全局使用组件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;app1&quot;&gt;</span><br><span class="line">&lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;app2&quot;&gt;</span><br><span class="line">&lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  // 1.创建组件构造器</span><br><span class="line">  const myComponent = Vue.extend(&#123;</span><br><span class="line">    template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;组件标题&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;组件正文内容,今天天气真好！&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">  &#125;)</span><br><span class="line">  // 2.注册组件(全局组件, 意味着可以在多个Vue的实例下面使用)</span><br><span class="line">   Vue.component(&apos;my-cpn&apos;, myComponent)</span><br><span class="line">  let app1 = new Vue(&#123;</span><br><span class="line">    el: &apos;#app1&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">  let app2 = new Vue(&#123;</span><br><span class="line">    el: &apos;#app2&apos;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><strong>局部使用组件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app1"</span>&gt;</span><br><span class="line">&lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=<span class="string">"app2"</span>&gt;</span><br><span class="line">&lt;!--没有被渲染出来--&gt;</span><br><span class="line">&lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="comment">// 1.创建组件构造器</span></span><br><span class="line">  <span class="keyword">const</span> myComponent = Vue.extend(&#123;</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;h2&gt;组件标题&lt;/h2&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;组件正文内容,今天天气真好！&lt;/p&gt;</span></span><br><span class="line"><span class="string">      &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> app1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app1'</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">      <span class="string">'my-cpn'</span>: myComponent</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">let</span> app2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app2'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="注册组件语法糖"><a href="#注册组件语法糖" class="headerlink" title="注册组件语法糖"></a>注册组件语法糖</h1><ul><li>在上面注册组件的方式，可能会有些繁琐。<ul><li><code>Vue</code>为了简化这个过程，提供了注册的语法糖。</li><li>主要是省去了调用<code>Vue.extend()</code>的步骤，而是可以直接使用一个对象来代替。</li><li>下面就看一下语法糖注册全局组件和局部组件：</li></ul></li></ul><p>语法糖注册全局组件和局部组件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;my-cpn1&gt;&lt;/my-cpn1&gt;</span><br><span class="line">&lt;my-cpn2&gt;&lt;/my-cpn2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src="../js/vue.js"&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type="text/javascript"&gt;</span><br><span class="line">//1.全局组件注册的语法糖</span><br><span class="line">Vue.component('my-cpn1',&#123;</span><br><span class="line">template: `</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;组件标题&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;组件正文内容,今天天气真好!&lt;/p&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    `</span><br><span class="line">&#125;)</span><br><span class="line">//2.注册局部组件的语法糖</span><br><span class="line">const app = new Vue(&#123;</span><br><span class="line">el:"#app",</span><br><span class="line">data:&#123;&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">'my-cpn2':&#123;</span><br><span class="line"> template: `</span><br><span class="line"> &lt;div&gt;</span><br><span class="line">   &lt;h2&gt;组件标题&lt;/h2&gt;</span><br><span class="line">   &lt;p&gt;组件正文内容,今天真开心啊!&lt;/p&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> `</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1 id="组件数据的存放"><a href="#组件数据的存放" class="headerlink" title="组件数据的存放"></a>组件数据的存放</h1><ul><li>组件自己的数据存放在哪里呢？<ul><li>组件对象也有一个<code>data</code>属性(也可以有<code>methods</code>等属性)。</li><li>只是这个<code>data</code>属性必须是一个函数</li><li>而且这个函数返回一个对象，对象内部保存着数据</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;my-cpn&gt;&lt;/my-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=<span class="string">"myCpn"</span>&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h2&gt;消息：&#123;&#123;massage&#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">const app = new Vue(&#123;</span></span><br><span class="line">el: "#app",</span><br><span class="line">components: &#123;</span><br><span class="line"><span class="string">"my-cpn"</span>: &#123;</span><br><span class="line">template: <span class="string">'#myCpn'</span>,</span><br><span class="line">data() &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">massage: <span class="string">'Hello World'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><ul><li>为什么<code>data</code>在组件中必须是一个函数呢？<ul><li>首先，如果不是一个函数，<code>Vue</code>直接就会保错。</li><li>其次，原因是在于<code>Vue</code>每个组件对象都返回一个新的对象，因为如果是同一个对象的，组件在多次使用后会相互影响。</li></ul></li></ul><h1 id="父子组件的通讯"><a href="#父子组件的通讯" class="headerlink" title="父子组件的通讯"></a>父子组件的通讯</h1><ul><li><p>在开发中，往往一些数据确实需要从上层传递到下层：</p><ul><li>比如在一个页面中，我们从服务器请求到很多数据。</li><li>其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下面的子组件进行展示。</li><li>这个时候，并不会让子组件再次发送一个网络请求，而是直接让<strong>大组件(父组件)</strong> 将数据传递给<strong>小组件(子组件)</strong></li></ul></li><li><p>如何进行父子组件间的通讯？<code>Vue</code>官方提到</p><ul><li>通过<code>props</code>向子组件传递数据</li><li>通过事件向父组件发送消息</li></ul></li></ul><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/props.png?raw=true" alt="image"></p><h1 id="props基本用法"><a href="#props基本用法" class="headerlink" title="props基本用法"></a>props基本用法</h1><ul><li>在组件中，使用选项<code>props</code>来声明需要从父级接收到的数据。</li><li><code>props</code>的值有两种方式：<ul><li>方式一： 字符串数组，数组中的字符串就是传递时的名称</li><li>方式二：对象，对象可以设置传递时的类型，也可以设置默认值等</li></ul></li><li>下面是一个最简单的<code>props</code>传递方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;child-cpn :message=<span class="string">"message"</span>&gt;&lt;/child-cpn&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=<span class="string">"childCpn"</span>&gt;</span><br><span class="line">&lt;div&gt;显示的信息:&#123;&#123;massage&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">data:&#123; <span class="comment">//Vue实例中的data</span></span><br><span class="line">message:<span class="string">"Hello World"</span></span><br><span class="line">&#125;,</span><br><span class="line">components: &#123;</span><br><span class="line"><span class="string">"child-cpn"</span>:&#123; <span class="comment">// 子组件中的props</span></span><br><span class="line">template: <span class="string">"#childCpn"</span>,</span><br><span class="line">props::[<span class="string">'message'</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="props数据验证"><a href="#props数据验证" class="headerlink" title="props数据验证"></a>props数据验证</h1><ul><li>除了数组之外，我们也可以使用对象，当需要对<code>props</code> <strong>进行类型等验证时</strong> ，就需要对象的写法。</li><li>验证都支持哪些数据类型呢？ 如下：<ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Data</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul></li><li>当我们有自定义构造函数时，验证页支持自定义的类型   </li></ul><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/props-type.png?raw=true" alt="image"></p><h1 id="父级向子级传递"><a href="#父级向子级传递" class="headerlink" title="父级向子级传递"></a>父级向子级传递</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;cpn :cmessage=<span class="string">"message"</span> :cmovies=<span class="string">"movies"</span>&gt;&lt;/cpn&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;template id="cpn"&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">&lt;ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;li v-for="item in cmovies"&gt;&#123;&#123;item&#125;&#125;&lt;/</span>li&gt;</span><br><span class="line">&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&#123;&#123;cmessage&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="comment">//创建子组件</span></span><br><span class="line"><span class="keyword">const</span> cpn = &#123;</span><br><span class="line">template:<span class="string">"#cpn"</span>,</span><br><span class="line">props:&#123;</span><br><span class="line"><span class="comment">//1.类型限制</span></span><br><span class="line"><span class="comment">//2.提供一些默认值，以及必传值</span></span><br><span class="line">cmessage:&#123;</span><br><span class="line">type: <span class="built_in">String</span>,</span><br><span class="line"><span class="keyword">default</span>: <span class="string">''</span>,</span><br><span class="line">required: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 类型是对象或者数组时，默认值必须是一个函数</span></span><br><span class="line">cmovies:&#123;</span><br><span class="line">type: <span class="built_in">Array</span>,</span><br><span class="line"><span class="keyword">default</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">message:<span class="string">"Hello World"</span>,</span><br><span class="line">movies: [<span class="string">'Vue.js'</span>, <span class="string">'React'</span>, <span class="string">'Angular'</span>]</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line">cpn</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="子级向父级传递"><a href="#子级向父级传递" class="headerlink" title="子级向父级传递"></a>子级向父级传递</h1><ul><li><code>props</code>用于父组件向子组件传递数据，还有一种比较常见的是子组件传递数据或者事件到父组件中。</li><li>应该如何处理？这时候需要使用<strong>自定义事件</strong>来完成。</li><li>什么时候需要自定义事件呢？<ul><li>当子组件需要向父组件传递数据时，就要用到自定义事件。</li><li>之前学习的<code>v-on</code>不仅仅可以用于监听<code>DOM</code>事件，也可以用于组件间的自定义事件。</li></ul></li><li>自定义事件的流程：<ul><li>在子组件中，通过<code>$emit()</code>来触发事件。</li><li>在父组件中，通过<code>v-on</code>来监听子组件事件。</li></ul></li><li>简单的例子：<ul><li>通过两个按钮<code>+1</code>和<code>-1</code>，点击后修改<code>counter</code>。</li><li>整个操作的过程还是在子组件中完成，但是之后的展示交给父组件。</li><li>这样，我们就需要将子组件中的<code>counter</code>，传给父组件的某个属性，比如<code>total</code></li></ul></li></ul><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/childCpn.png?raw=true" alt="image">     </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;child-cpn </span><br><span class="line">@increment=<span class="string">"changeTotal"</span></span><br><span class="line">@decrement=<span class="string">"changeTotal"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/child-cpn&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;点击次数: &#123;&#123;total&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;template id="childCpn"&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;</span></span><br><span class="line"><span class="regexp">&lt;button @click="increment"&gt;+1&lt;/</span>button&gt;</span><br><span class="line">&lt;button @click=<span class="string">"decrement"</span>&gt;<span class="number">-1</span>&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">const app = new Vue(&#123;</span></span><br><span class="line">el:"#app",  //vue实例</span><br><span class="line">data:&#123;</span><br><span class="line">total:<span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;   </span><br><span class="line">changeTotal()&#123;</span><br><span class="line"><span class="keyword">this</span>.total = counter</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">components:&#123;</span><br><span class="line"><span class="string">'child-cpn'</span>:&#123;</span><br><span class="line">template:<span class="string">"#childCpn"</span>,</span><br><span class="line">data()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">counter: <span class="number">0</span>  <span class="comment">//子组件</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">increment()&#123;</span><br><span class="line"><span class="keyword">this</span>.counter++;</span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"increment"</span>, <span class="keyword">this</span>.counter)</span><br><span class="line">&#125;,</span><br><span class="line">decrement()&#123;</span><br><span class="line"><span class="keyword">this</span>.counter++;</span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">"decrement"</span>, <span class="keyword">this</span>.counter)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="父子组件的访问方式-refs"><a href="#父子组件的访问方式-refs" class="headerlink" title="父子组件的访问方式:$refs"></a>父子组件的访问方式:$refs</h1><h2 id="refs的使用："><a href="#refs的使用：" class="headerlink" title="$refs的使用："></a><code>$refs</code>的使用：</h2><ul><li><code>$refs</code>和<code>ref</code>指令通常是一起使用的。</li><li>首先，我们通过<code>ref</code>给某一个子组件绑定一个特定的<code>ID</code>。</li><li>其次，通过<code>this.$refs.ID</code>就可以访问到该组件了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;child-cpn1 ref=<span class="string">"child1"</span>&gt;&lt;/child-cpn1&gt;</span><br><span class="line">&lt;child-cpn2 ref="child2"&gt;&lt;/child-cpn2&gt;</span><br><span class="line">&lt;button @click="showRefsCpn"&gt;通过$refs访问子组件&lt;/button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">showRefsCpn()&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.child1.message)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.$refs.child2.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="非父子组件通讯"><a href="#非父子组件通讯" class="headerlink" title="非父子组件通讯"></a>非父子组件通讯</h1><ul><li>在<code>Vue2.x</code>中，有一种方案是通过中央事件总线，也就是一个中介来完成。<ul><li>但是这种方案和直接使用<code>Vuex</code>的状态管理方案还是逊色很多。</li><li>并且<code>Vue</code>提供了更多好用的功能，所有我们这里就简单的了解一下。</li></ul></li></ul><p>简单的例子：比如在<code>A</code>,<code>B</code>组件为兄弟组件，现在<code>A</code>组件要调用<code>B</code>组件中的<code>C</code>事件</p><ul><li><p>1.创建一个<code>bus.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">const</span> Bus = <span class="keyword">new</span> Vue()</span><br><span class="line"><span class="keyword">export</span> &#123;Bus&#125;</span><br></pre></td></tr></table></figure></li><li><p>2.在<code>A</code>,<code>B</code>组件中引入<code>bus.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Bus &#125; <span class="keyword">from</span> <span class="string">'bus'</span></span><br></pre></td></tr></table></figure></li><li><p>3.在<code>A</code>组件中定义要调用<code>B</code>事件的<code>bus</code>事件名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如: Bus.$emit(<span class="string">'callC'</span>)</span><br></pre></td></tr></table></figure></li><li><p>4.在<code>B</code>组件中调用<code>C</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Bus.$on(<span class="string">'callC'</span>,<span class="keyword">this</span>.C)</span><br></pre></td></tr></table></figure></li></ul><p><code>Bus.$on</code>里面有两个参数，第一个是在<code>A</code>组件定义的名字，第二个参数是<code>B</code>组件要调用的方法。</p><p>==总结：==</p><p>以上所述的是vue中组件化的理解，哪里有什么错误的欢迎指出修正， 希望对大家有所帮助！！！</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue中v-model的使用</title>
      <link href="/2019/07/13/vue/vue%E4%B8%AD%E7%9A%84v-model%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/vue.jpg?raw=true" alt="image"></p><h1 id="vue中的v-mdoel的应用"><a href="#vue中的v-mdoel的应用" class="headerlink" title="vue中的v-mdoel的应用"></a>vue中的v-mdoel的应用</h1><blockquote><p><code>v-model</code>用于表单数据的双向绑定，其实它就是一个语法糖。</p></blockquote><p>vue中经常使用到表单绑定例如：<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;radio&gt;</code>、<code>&lt;checkbox&gt;</code>这类表单元素，<code>vue</code>对于这些元素的数据绑定跟我们以前经常使用的<code>jquery</code>有些区别。<code>vue</code>使用<code>v-model</code>实现这些标签的双向绑定，会根据控件类型自动选取正确的方法来更新元素。<br><a id="more"></a></p><h1 id="表单绑定v-model"><a href="#表单绑定v-model" class="headerlink" title="表单绑定v-model"></a>表单绑定v-model</h1><ul><li>表单控件在实际开发中是非常常见的。特别是对于用户信息的提交，需要大量的表单。</li><li><code>Vue</code>中使用<code>v-model</code>指令来实现表单元素和数据的双向绑定。</li><li>案例分析：<ul><li>当我们在输入框输入内容时</li><li>因为<code>input</code>中的<code>v-model</code>绑定了<code>message</code>，所以会实时将输入的内容传递给<code>message</code>，<code>message</code>发生改变。</li><li>当<code>message</code>发生改变时，因为上面我们使用<code>Mustache</code>语法，将<code>message</code>的值插入到<code>DOM</code>中，所以<code>DOM</code>会发生响应的改变。</li><li>所以，通过<code>v-model</code>实现了双向的数据绑定 。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"message"</span> /&gt;</span><br><span class="line">&#123;&#123;message&#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">const app = new Vue(&#123;</span></span><br><span class="line">el:"#app",</span><br><span class="line">data:&#123;</span><br><span class="line">message:<span class="string">"你好,v-model"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h1><ul><li><code>v-model</code>其实是一个语法糖，它的背后本质上是包含两个操作   <ul><li>1.<code>v-bind</code>绑定一个value属性</li><li>2.<code>v-on</code>指令给当前元素绑定<code>input</code>事件</li></ul></li><li>也就是说下面的代码：等同于下面的代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"message"</span> /&gt;</span><br><span class="line">&lt;!--等同于下面--&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> :value=<span class="string">"message"</span> @input=<span class="string">"message = $event.target.value"</span> /&gt;</span><br></pre></td></tr></table></figure><h1 id="v-model的修饰符"><a href="#v-model的修饰符" class="headerlink" title="v-model的修饰符"></a>v-model的修饰符</h1><blockquote><p><code>v-model</code>修饰符与事件的修饰符类似，用于控制同步的时机</p></blockquote><h2 id="lazy修饰符"><a href="#lazy修饰符" class="headerlink" title=".lazy修饰符"></a>.lazy修饰符</h2><ul><li>在输入框中，<code>v-model</code>是默认在<code>input</code>事件中同步输入框的数据。</li><li>使用修饰符<code>.lazy</code>会转变为在<code>change</code>事件中同步。</li><li>在失去焦点或者按回车才更新。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model.lazy=<span class="string">"message"</span> /&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">message:<span class="string">"你好,v-model"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="number修饰符"><a href="#number修饰符" class="headerlink" title=".number修饰符"></a>.number修饰符</h2><blockquote><p>使用修饰符<code>number</code>可以将输入转换成<code>Number</code>类型，否则不管是否输入数字，其实都是<code>String</code>。</p></blockquote><ul><li>默认情况下，在输入框中无论我们输入的是字母还是数字，都会被当做字符串类型进行处理。</li><li>但是如果我们希望处理的是数字类型，那么最好直接将内容当做数字处理。</li><li><code>number</code>修饰符可以让在输入框中输入的内容自动转成数字类型。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model.number=<span class="string">"message"</span> /&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">message:<span class="string">"123456789"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="trim修饰符"><a href="#trim修饰符" class="headerlink" title=".trim修饰符"></a>.trim修饰符</h2><blockquote><p>修饰符<code>.trim</code> 可以自动过滤输入的首位空格。</p></blockquote><ul><li>如果输入的内容首尾有很多空格，通常我们希望将其去除</li><li><code>trim</code>修饰符可以过滤内容左右两边的空格。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"text"</span> v-model.trim=<span class="string">"message"</span> /&gt;</span><br><span class="line">&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">message:<span class="string">"123456789"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="v-model-radio的案例"><a href="#v-model-radio的案例" class="headerlink" title="v-model:radio的案例"></a>v-model:radio的案例</h1><blockquote><p>当存在多个单选框时</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"male"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"radio"</span> id=<span class="string">"male"</span> value=<span class="string">"男"</span> v-model=<span class="string">"sex"</span>/&gt;男</span><br><span class="line">&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;label for="female"&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="radio" id="female" value="女" v-model="sex"/</span>&gt;女</span><br><span class="line">&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;您选择的性别是：&#123;&#123;sex&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">const app = new Vue(&#123;</span></span><br><span class="line">el:"#app",</span><br><span class="line">data:&#123;</span><br><span class="line">sex:<span class="string">"男"</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="v-model-checkbox的案例"><a href="#v-model-checkbox的案例" class="headerlink" title="v-model:checkbox的案例"></a>v-model:checkbox的案例</h1><ul><li>复选框分为两种情况：单个勾选框和多个勾选框</li><li>单个勾协框：   <ul><li><code>v-model</code>即为布尔值。</li><li>此时<code>input</code>的<code>value</code>并不影响<code>v-model</code>的值。   </li></ul></li><li>多个复选框：<ul><li>当是多个复选框时，因为可以选中多个，所以对应的<code>data</code>中的属性是一个数组。</li><li>当选中某一个时，就会将<code>input</code>的<code>value</code>添加到数组中去。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!--单个复选框--&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"check"</span>&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> v-model=<span class="string">"checked"</span> id=<span class="string">"check"</span>/&gt;同意协议</span><br><span class="line">&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;是否选中：&#123;&#123;checked&#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;!--多个复选框--&gt;</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"篮球"</span> v-model=<span class="string">"hobbies"</span> /&gt; 篮球</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"足球"</span> v-model=<span class="string">"hobbies"</span> /&gt;足球</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"兵兵球"</span> v-model=<span class="string">"hobbies"</span> /&gt;兵兵球</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> value=<span class="string">"羽毛球"</span> v-model=<span class="string">"hobbies"</span> /&gt;羽毛球</span><br><span class="line">&lt;h2&gt;您的爱好是： &#123;&#123;hobbies&#125;&#125;&lt;<span class="regexp">/h2&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;script src=<span class="string">"../js/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">"#app"</span>,</span><br><span class="line">data:&#123;</span><br><span class="line">checked: <span class="literal">false</span>, <span class="comment">//单选框</span></span><br><span class="line">hobbies: [], <span class="comment">//多选框</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h1 id="v-model-select的案例"><a href="#v-model-select的案例" class="headerlink" title="v-model:select的案例"></a>v-model:select的案例</h1><ul><li>和<code>checkbox</code>一样，<code>select</code>也分单选和多选两种情况。</li><li>单选：只能选中一个值。<ul><li><code>v-model</code>绑定的是一个值。</li><li>当我们选中<code>option</code>中的一个值时，会将它对应的<code>value</code>赋值<code>mySelect</code>中</li></ul></li><li>多选：可以选中多个值<ul><li><code>v-model</code>绑定的是一个数组。</li><li>当选中多个值时，就会将选中的<code>option</code>对应的<code>value</code>添加到数组<code>mySelects</code>中去</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">&lt;!-<span class="number">-1.</span>选择一个值--&gt;</span><br><span class="line">&lt;select name=<span class="string">"abc"</span> v-model=<span class="string">"mySelect"</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">"苹果"</span>&gt;苹果&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option value="香蕉"&gt;香蕉&lt;/</span>option&gt;</span><br><span class="line">&lt;option value=<span class="string">"榴莲"</span>&gt;榴莲&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option value="葡萄"&gt;葡萄&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;您选择的水果是: &#123;&#123;fruit&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">&lt;!-<span class="number">-2.</span>选择多个值--&gt;</span><br><span class="line">&lt;select name=<span class="string">"abc"</span> v-model=<span class="string">"mySelects"</span> multiple=<span class="string">"multiple"</span>&gt;</span><br><span class="line">&lt;option value=<span class="string">"苹果"</span>&gt;苹果&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option value="香蕉"&gt;香蕉&lt;/</span>option&gt;</span><br><span class="line">&lt;option value=<span class="string">"榴莲"</span>&gt;榴莲&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">&lt;option value="葡萄"&gt;葡萄&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">&lt;h2&gt;您选择的水果是：&#123;&#123;fruits&#125;&#125;&lt;/</span>h2&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="../</span>js/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;script type="</span>text/javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">const app = new Vue(&#123;</span></span><br><span class="line">el:"#app",</span><br><span class="line">data:&#123;</span><br><span class="line">message:<span class="string">"您好啊"</span>,</span><br><span class="line">mySelect:<span class="string">'香蕉'</span>, <span class="comment">//默认值</span></span><br><span class="line">mySelects:[]</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>==<strong>总结</strong>==</p><p>以上所述的是vue中的v-model的使用和一下小小的详解，希望对大家有所帮助！！！</p>]]></content>
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客添加访问量统计</title>
      <link href="/2019/05/21/hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E8%AE%BF%E9%97%AE%E9%87%8F%E7%BB%9F%E8%AE%A1/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/hexos.jpg?raw=true" alt="image"></p><h1 id="前导必备"><a href="#前导必备" class="headerlink" title="前导必备"></a>前导必备</h1><ul><li><a href="http://www.lolint.com/" target="_blank" rel="noopener">博主博客地址</a></li><li>博主使用的是<code>next</code>主题</li><li>访问量统计使用<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a></li></ul><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>比较早的时候使用next主题，想要开启站点统计功能（访客、总访问量），只需要找到<code>_config.yml</code>配置文件，把<code>busuanzi_count</code>的<code>enable</code>设置为<code>true</code>即可。但是近期，大概是2018年10月份左右，这个不蒜子的统计功能就失效了。查阅了<a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子官方</a>的说法。<br><a id="more"></a> </p><h2 id="引入不蒜子并添加站点访问量"><a href="#引入不蒜子并添加站点访问量" class="headerlink" title="引入不蒜子并添加站点访问量"></a>引入不蒜子并添加站点访问量</h2><p> 1、在<code>themes/next/layout/_partial/footer.ejs</code>末尾添加如下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">&lt;script <span class="keyword">async</span> src=<span class="string">"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;span id=<span class="string">"busuanzi_container_site_pv"</span>&gt;本站总访问量&lt;span id=<span class="string">"busuanzi_value_site_pv"</span>&gt;&lt;/span&gt;次&lt;<span class="regexp">/span&gt;&amp;nbsp&amp;nbsp&amp;nbsp</span></span><br><span class="line"><span class="regexp">&lt;span id="busuanzi_container_site_uv"&gt;本站访客数&lt;span id="busuanzi_value_site_uv"&gt;&lt;/</span>span&gt;人次&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p>2、注意：<code>_config.yml</code>配置文件<code>busuanzi_count</code>是需要打开的。我这里是已经开启过了，只是域名失效了而已。如果默认没有打开，可以参考如下配置。<br>配置文件路径：<code>\themes\next_config.yml</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Show PV/UV of the website/page with busuanzi.</span><br><span class="line"># Get more information on http://ibruce.info/2015/04/04/busuanzi/</span><br><span class="line">busuanzi_count:</span><br><span class="line">  # count values only if the other configs are false</span><br><span class="line">  enable: <span class="literal">true</span></span><br><span class="line">  # custom uv span for the whole site</span><br><span class="line">  site_uv: <span class="literal">true</span></span><br><span class="line">  site_uv_header: 访客数</span><br><span class="line">  site_uv_footer: 人</span><br><span class="line">  # custom pv span for the whole site</span><br><span class="line">  site_pv: <span class="literal">true</span></span><br><span class="line">  site_pv_header: 总访问量</span><br><span class="line">  site_pv_footer: 次</span><br><span class="line">  # custom pv span for one page only</span><br><span class="line">  page_pv: <span class="literal">true</span></span><br><span class="line">  page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt;  阅读数</span><br><span class="line">  page_pv_footer:</span><br></pre></td></tr></table></figure></p><p><strong><a href="http://note.youdao.com/" target="_blank" rel="noopener">个人站点</a></strong></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序 授权登录流程</title>
      <link href="/2018/07/13/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20%E6%8E%88%E6%9D%83%E7%99%BB%E5%BD%95%E6%B5%81%E7%A8%8B/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/xiaocx.jpg?raw=true" alt="image"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>由于微信官方修改了 <code>getUserInfo</code> 接口，所以现在无法实现一进入微信小程序就弹出授权窗口，只能通过 <code>button</code> 去触发</li></ul><h1 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h1><ul><li>自定义一个微信授权登录页面，让用户通过<code>button</code>去触发<code>getUserInof</code>接口。在用户进入微信小程序时，判断用户是否授权，如果没有授权就显示授权页面，让用户去执行授权操作。如果授权了，则直接跳过，进入首页。</li></ul><h1 id="小程序登录流程"><a href="#小程序登录流程" class="headerlink" title="小程序登录流程"></a>小程序登录流程</h1><a id="more"></a> <h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><ul><li>获取当前微信用户的登录凭证（<code>code</code>）</li><li>可通过<code>wx.login</code> <code>api</code>获得</li><li><code>wx.login</code>换取的<code>code</code>只能使用一次，如果需要新的<code>code</code>只能重新调用<code>wx.login</code>接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wx.login(&#123;</span><br><span class="line">    success:<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> code= res.code</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>通过<code>wx.login</code>获得临时登录凭证传给服务器获得<code>openID</code>和<code>session_key</code>,服务器需要通过<code>appid</code>和<code>appsecret</code>（这两个是从小程序后台获得）、<code>code</code>（从<code>wx.login</code>中获取到）向微信服务器发送请求获取<code>session_ke</code>y和<code>openID</code>。确保安全，建议将获得的<code>session_key</code>加密再传给客户端。</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>客户端获得加密后的登录态后把登录态存在本地以便后面进行业务请求。由于小程序中不存在<code>cookie</code>机制。所以可以把登录态存储在<code>storage</code>中。</p><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><h2 id="index-wxml"><a href="#index-wxml" class="headerlink" title="index.wxml"></a>index.wxml</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;view wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;isHide&#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;view wx:<span class="keyword">if</span>=<span class="string">"&#123;&#123;canIUse&#125;&#125;"</span> &gt;</span><br><span class="line">        &lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">'header'</span>&gt;</span><br><span class="line">            &lt;image src=<span class="string">'/images/wx_login.png'</span>&gt;&lt;/image&gt;</span><br><span class="line">        &lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">        &lt;view class='content'&gt;</span></span><br><span class="line"><span class="regexp">         &lt;view&gt;申请获取以下权限&lt;/</span>view&gt;</span><br><span class="line">          &lt;text&gt;获得你的公开信息(昵称，头像等)&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>view&gt;</span><br><span class="line">        &lt;button <span class="class"><span class="keyword">class</span></span>=<span class="string">'bottom'</span> type=<span class="string">'primary'</span> open-type=<span class="string">"getUserInfo"</span> lang=<span class="string">"zh_CN"</span> bindgetuserinfo=<span class="string">"bindGetUserInfo"</span>&gt;</span><br><span class="line">            授权登录</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>view&gt;</span><br><span class="line">    &lt;view wx:<span class="keyword">else</span>&gt;请升级微信版本&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br><span class="line">&lt;view wx:<span class="keyword">else</span>&gt;</span><br><span class="line">    &lt;view&gt;首页内容&lt;<span class="regexp">/view&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br></pre></td></tr></table></figure><h2 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        <span class="comment">//判断小程序的API，回调，参数，组件等是否在当前版本可用。</span></span><br><span class="line">        canIUse: wx.canIUse(<span class="string">'button.open-type.getUserInfo'</span>),</span><br><span class="line">        isHide: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// 查看是否授权</span></span><br><span class="line">        wx.getSetting(&#123;</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (res.authSetting[<span class="string">'scope.userInfo'</span>]) &#123;</span><br><span class="line">                    wx.getUserInfo(&#123;</span><br><span class="line">                        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                            <span class="comment">// 用户已经授权过,不需要显示授权页面,所以不需要改变 isHide 的值</span></span><br><span class="line">                            <span class="comment">// 根据自己的需求有其他操作再补充</span></span><br><span class="line">                            <span class="comment">// 我这里实现的是在用户授权成功后，调用微信的 wx.login 接口，从而获取code</span></span><br><span class="line">                            wx.login(&#123;</span><br><span class="line">                                success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                                    <span class="comment">// 获取到用户的 code 之后：res.code</span></span><br><span class="line">                                    <span class="built_in">console</span>.log(<span class="string">"用户的code:"</span> + res.code);</span><br><span class="line">                                    <span class="comment">// 可以传给后台，再经过解析获取用户的 openid</span></span><br><span class="line">                                    <span class="comment">// 或者可以直接使用微信的提供的接口直接获取 openid ，方法如下：</span></span><br><span class="line">                                    <span class="comment">// wx.request(&#123;</span></span><br><span class="line">                                    <span class="comment">//     // 自行补上自己的 APPID 和 SECRET</span></span><br><span class="line">                                    <span class="comment">//     url: 'https://api.weixin.qq.com/sns/jscode2session?appid=自己的APPID&amp;secret=自己的SECRET&amp;js_code=' + res.code + '&amp;grant_type=authorization_code',</span></span><br><span class="line">                                    <span class="comment">//     success: res =&gt; &#123;</span></span><br><span class="line">                                    <span class="comment">//         // 获取到用户的 openid</span></span><br><span class="line">                                    <span class="comment">//         console.log("用户的openid:" + res.data.openid);</span></span><br><span class="line">                                    <span class="comment">//     &#125;</span></span><br><span class="line">                                    <span class="comment">// &#125;);</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 用户没有授权</span></span><br><span class="line">                    <span class="comment">// 改变 isHide 的值，显示授权页面</span></span><br><span class="line">                    that.setData(&#123;</span><br><span class="line">                        isHide: <span class="literal">true</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"> </span><br><span class="line">    bindGetUserInfo: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.detail.userInfo) &#123;</span><br><span class="line">            <span class="comment">//用户按了允许授权按钮</span></span><br><span class="line">            <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">            <span class="comment">// 获取到用户的信息了，打印到控制台上看下</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"用户的信息如下："</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(e.detail.userInfo);</span><br><span class="line">            <span class="comment">//授权成功后,通过改变 isHide 的值，让实现页面显示出来，把授权页面隐藏起来</span></span><br><span class="line">            that.setData(&#123;</span><br><span class="line">                isHide: <span class="literal">false</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//用户按了拒绝按钮</span></span><br><span class="line">            wx.showModal(&#123;</span><br><span class="line">                title: <span class="string">'警告'</span>,</span><br><span class="line">                content: <span class="string">'您点击了拒绝授权，将无法进入小程序，请授权之后再进入!!!'</span>,</span><br><span class="line">                showCancel: <span class="literal">false</span>,</span><br><span class="line">                confirmText: <span class="string">'返回授权'</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">                    <span class="comment">// 用户没有授权成功，不需要改变 isHide 的值</span></span><br><span class="line">                    <span class="keyword">if</span> (res.confirm) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">'用户点击了“返回授权”'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>以上就是我的一些理解。有逻辑不清晰的地方,请不吝留言赐教!</strong></p>]]></content>
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git常用代码</title>
      <link href="/2018/04/10/git/git%E5%B8%B8%E7%94%A8%E4%BB%A3%E7%A0%81/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/gits.jpg?raw=true" alt="image"></p><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git init</span><br></pre></td></tr></table></figure><h3 id="添加到暂存区"><a href="#添加到暂存区" class="headerlink" title="添加到暂存区"></a>添加到暂存区</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git add &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="提交到仓库"><a href="#提交到仓库" class="headerlink" title="提交到仓库"></a>提交到仓库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git commit -m <span class="string">"your description"</span></span><br></pre></td></tr></table></figure><a id="more"></a> <blockquote><p>-m 后面是解析说明</p><h3 id="查看仓库当前状态"><a href="#查看仓库当前状态" class="headerlink" title="查看仓库当前状态"></a>查看仓库当前状态</h3></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git status</span><br></pre></td></tr></table></figure><h3 id="查看距离上次提交做了哪些修改"><a href="#查看距离上次提交做了哪些修改" class="headerlink" title="查看距离上次提交做了哪些修改"></a>查看距离上次提交做了哪些修改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git diff &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="查看提交记录"><a href="#查看提交记录" class="headerlink" title="查看提交记录"></a>查看提交记录</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git log</span><br></pre></td></tr></table></figure><p><strong>精简格式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git log --pretty=online</span><br></pre></td></tr></table></figure><p><strong>查看每一次提交记录，包括版本回退记录</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git reflog</span><br></pre></td></tr></table></figure><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><blockquote><p>通过<code>HEAD</code>回退版本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git reset --hard HEAD^</span><br></pre></td></tr></table></figure><blockquote><p><code>HEAD</code> 表示当前版本<code>HEAD^</code>表示上1个版本 <code>HEAD^</code> 表示上2个版本 <code>HEAD~n</code> 表示上<code>n</code>个版本</p><p>通过commit id回退版本</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git reset --hard <span class="number">3628164</span></span><br></pre></td></tr></table></figure><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git rm &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="恢复误删文件"><a href="#恢复误删文件" class="headerlink" title="恢复误删文件"></a>恢复误删文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:luosijie/Front-end-Blog.git</span><br></pre></td></tr></table></figure><p><strong>或</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git remote add origin https:<span class="comment">//github.com/luosijie/Front-endBlog.git</span></span><br></pre></td></tr></table></figure><p>添加后，远程库的名字就是<code>origin</code>，这是<code>Git</code>默认的叫法，也可以改成别的，但是<code>origin</code>这个名字一看就知道是远程库。</p><p><code>Git</code>支持多种协议，默认的<code>git://</code>使用<code>ssh</code>，但也可以使用<code>https</code>等其他协议。 使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放<code>http</code>端口的公司内部就无法使用<code>ssh</code>协议而只能用<code>https</code>   </p><h3 id="查看远程库"><a href="#查看远程库" class="headerlink" title="查看远程库"></a>查看远程库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git remote</span><br></pre></td></tr></table></figure><h3 id="删除远程库"><a href="#删除远程库" class="headerlink" title="删除远程库"></a>删除远程库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="推送内容到远程库"><a href="#推送内容到远程库" class="headerlink" title="推送内容到远程库"></a>推送内容到远程库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//origin 为远程库名称</span></span><br><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure><p>第一次推送<code>master</code>分支时，由于远程库是空的，加上了<code>-u</code>参数，<code>Git</code>不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>第二次开始就可以用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>来源 <a href="https://www.liaoxuefeng.com/wiki/896043488029600/898732864121440" target="_blank" rel="noopener">廖雪峰Git教程</a></p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ajax入门和发送http请求</title>
      <link href="/2017/07/21/Ajax/Ajax%E5%85%A5%E9%97%A8%E5%92%8C%E5%8F%91%E9%80%81http%E8%AF%B7%E6%B1%82/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/ajax.jpg?raw=true" alt="image"></p><h1 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h1><h3 id="同步和异步的概念"><a href="#同步和异步的概念" class="headerlink" title="同步和异步的概念"></a>同步和异步的概念</h3><ul><li>同步：必须等待前面的任务完成，才能继续后面的任务。</li><li>异步：不受当前任务的影响</li></ul><p>拿排队举例</p><ul><li>同步：在银行排队时，只有等到你了，才能够去处理业务。</li><li>异步：在排队的时候，可以玩手机。<a id="more"></a> <h3 id="异步更新网站"><a href="#异步更新网站" class="headerlink" title="异步更新网站"></a>异步更新网站</h3>在访问一个普通的网站时，当浏览器加载完<code>HTML</code>、<code>CSS</code>、<code>JS</code>以后，网站的内容就固定了。如果想让网站内容发生更改，就必须刷新页面才能够看到更新的内容。</li></ul><p>如果用到异步更新，情况就大为改观了。比如，我们在访问新浪微博时，看到一大半了，点击底部的加载更多，会自动帮我们加载更多的微博，同时页面并没有刷新。</p><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><h3 id="Ajax的概念"><a href="#Ajax的概念" class="headerlink" title="Ajax的概念"></a>Ajax的概念</h3><p><code>Ajax：Asynchronous Javascript And XML</code>（异步 <code>JavaScript</code> 和<code>XML</code>）。它并不是凭空出现的新技术，而是对于现有技术的结合。<code>Ajax</code>的核心是 <code>js</code> 对象：<code>XMLHttpRequest</code>。</p><h3 id="发送Ajax请求的五个步骤"><a href="#发送Ajax请求的五个步骤" class="headerlink" title="发送Ajax请求的五个步骤"></a>发送Ajax请求的五个步骤</h3><blockquote><p>就是使用<code>XMLHttpRequest</code>对象的五个步骤。</p></blockquote><p><strong>一个完整的<code>HTTP</code>请求需要的是:</strong></p><ul><li>请求的网址、请求方法get/post。</li><li>提交请求的内容数据，请求主体等。</li><li>接收响应回来的内容。</li></ul><p><strong>发送Ajax请求的五个步骤：</strong><br>（1）创建异步对象。即<code>XMLHttpRequest</code>对象。<br>（2）使用<code>open</code>方法设置请求的参数。<code>open(method,url,async)</code>.参数解析：请求的方法、请求的<code>url</code>、是否异步。<br>（3）发送请求。<br>（4）注册事件。注册<code>onreadystatechange</code>事件，状态改变时就会调用。<br>如果要在数据完整请求回来的时候才会调用，需要手动写一些判断的逻辑。<br>（5）获取返回的数据。</p><h4 id="Ajax请求：以get请求举例"><a href="#Ajax请求：以get请求举例" class="headerlink" title="Ajax请求：以get请求举例"></a><strong>Ajax请求：以get请求举例</strong></h4><p>(1) <code>index.html</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Ajax 发送 get 请求&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="button" value="发送get_ajax请求" id='btnAjax'&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">    // 绑定点击事件</span></span><br><span class="line"><span class="string">    document.querySelector('#btnAjax').onclick = function () &#123;</span></span><br><span class="line"><span class="string">        // 发送ajax 请求 需要 五步</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // （1）创建异步对象</span></span><br><span class="line"><span class="string">        var xhr = new XMLHttpRequest();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // （2）设置请求的参数。包括：请求的方法、请求的url。</span></span><br><span class="line"><span class="string">        xhr.open('get', '02-ajax.php');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        // （3）发送请求</span></span><br><span class="line"><span class="string">        xhr.send();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        //（4）注册事件。 onreadystatechange事件，状态改变时就会调用。</span></span><br><span class="line"><span class="string">        //如果要在数据完整请求回来的时候才调用，我们需要手动写一些判断的逻辑。</span></span><br><span class="line"><span class="string">        xhr.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="string">            // 为了保证 数据 完整返回，我们一般会判断 两个值</span></span><br><span class="line"><span class="string">            if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span></span><br><span class="line"><span class="string">                // 如果能够进到这个判断 说明 数据 完美的回来了,并且请求的页面是存在的</span></span><br><span class="line"><span class="string">                // 5.在注册的事件中 获取 返回的 内容 并修改页面的显示</span></span><br><span class="line"><span class="string">                console.log('数据返回成功');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                // 数据是保存在 异步对象的 属性中</span></span><br><span class="line"><span class="string">                console.log(xhr.responseText);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                // 修改页面的显示</span></span><br><span class="line"><span class="string">                document.querySelector('h1').innerHTML = xhr.responseText;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><p>(2)<code>01-ajax.php</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo <span class="string">'hello'</span>;</span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure></p><p>实现效果如下:<br><img src="https://github.com/Anson212/magentoWeb/blob/master/img/ajax-get.gif?raw=true" alt="image"></p><h4 id="Ajax请求：以post请求举例"><a href="#Ajax请求：以post请求举例" class="headerlink" title="Ajax请求：以post请求举例"></a><strong><code>Ajax</code>请求：以<code>post</code>请求举例</strong></h4><p>(1) <code>index.html</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Ajax 发送 post 请求&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="button" value="发送put_ajax请求" id='btnAjax'&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 异步对象</span></span><br><span class="line"><span class="string">    var xhr = new XMLHttpRequest();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 设置属性</span></span><br><span class="line"><span class="string">    xhr.open('post', '02.post.php');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 如果想要使用post提交数据,必须添加此行</span></span><br><span class="line"><span class="string">    xhr.setRequestHeader("</span>Content-type<span class="string">", "</span>application/x-www-form-urlencoded<span class="string">");</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 将数据通过send方法传递</span></span><br><span class="line"><span class="string">    xhr.send('name=fox&amp;age=18');</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    // 发送并接受返回值</span></span><br><span class="line"><span class="string">    xhr.onreadystatechange = function () &#123;</span></span><br><span class="line"><span class="string">        // 这步为判断服务器是否正确响应</span></span><br><span class="line"><span class="string">        if (xhr.readyState == 4 &amp;&amp; xhr.status == 200) &#123;</span></span><br><span class="line"><span class="string">            alert(xhr.responseText);</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="XMLHttpRequest-对象详解"><a href="#XMLHttpRequest-对象详解" class="headerlink" title="XMLHttpRequest 对象详解"></a>XMLHttpRequest 对象详解</h3><hr><p>使用 <code>XMLHttpRequest</code> 对象的五个步骤。</p><h4 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h4><p>发送请求的方法:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(method, url, <span class="keyword">async</span>);</span><br></pre></td></tr></table></figure></p><p>参数解析： </p><ol><li><code>method</code>：请求的类型; <code>GET</code>或<code>POST</code></li><li><code>url</code>：文件在服务器上的位置</li><li><code>async</code>：<code>true</code>（异步）或者<code>false</code>（同步）</li></ol><p>另外还有一个方法：（仅限于<code>POST</code>请求）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">send(string);</span><br></pre></td></tr></table></figure></p><h4 id="POST请求时注意"><a href="#POST请求时注意" class="headerlink" title="POST请求时注意"></a>POST请求时注意</h4><p>如果想让 像<code>form</code> 表单提交数据那样使用<code>POST</code>请求，就需要使用<code>XMLHttpRequest</code> 对象的 <code>setRequestHeader()</code>方法 来添加 <code>HTTP</code> 头。然后在 <code>send()</code> 方法中添加想要发送的数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"ajax_test.php"</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line"></span><br><span class="line">xmlhttp.send(<span class="string">"name=hello&amp;age=25"</span>);</span><br></pre></td></tr></table></figure></p><p>####　onreadystatechange 事件</p><p>注册 <code>onreadystatechange</code> 事件后，每当 <code>readyState</code> 属性改变时，就会调用 <code>onreadystatechange</code> 函数。　<br><code>readyState</code>：（存有 <code>XMLHttpRequest</code> 的状态。从<code>0</code> 到 <code>4</code> 发生变化）</p><ul><li>0: 请求未初始化</li><li>1: 服务器连接已建立</li><li>2: 请求已接收</li><li>3: 请求处理中</li><li>4: 请求已完成，且响应已就绪<br><code>status</code>：</li><li>200: “请求成功”</li><li>404: 未找到页面。<br>在 <code>onreadystatechange</code> 事件中，当 <code>readyState</code> 等于<code>4</code>，且状态码为<code>200</code>时，表示响应已就绪。   </li></ul><p><strong>服务器响应的内容 </strong>  </p><ul><li><code>responseText</code>：获得字符串形式的响应数据。</li><li><code>responseXML</code>：获得 XML 形式的响应数据。</li></ul><p>如果响应的是普通字符串，就使用<code>responseText</code>；如果响应的是<code>XML</code>，使用<code>responseXML</code></p><h3 id="Ajax-传输-JSON"><a href="#Ajax-传输-JSON" class="headerlink" title="Ajax 传输 JSON"></a>Ajax 传输 JSON</h3><h4 id="JSON-的语法"><a href="#JSON-的语法" class="headerlink" title="JSON 的语法"></a>JSON 的语法</h4><p><code>JSON(JavaScript ObjectNotation)</code>：是<code>ECMAScript</code>的子集。作用是进行数据的交换。语法更为简洁，网络传输、机器解析都更为迅速。</p><p><strong>语法规则：</strong></p><ul><li>数据在键值对中</li><li>数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>数据类型：</strong></p><ul><li>数字（整数或浮点数）</li><li>字符串（在双引号中）</li><li>逻辑值（true 或 false）</li><li>数组（在方括号中）</li><li>对象（在花括号中）</li><li>null</li></ul><p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">      <span class="string">"age"</span>:<span class="string">"25"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"小红"</span>,</span><br><span class="line">      <span class="string">"age"</span>:<span class="string">"24"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="string">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line"> <span class="string">"age"</span>:<span class="string">"25"</span>,</span><br><span class="line"> <span class="string">"sex"</span>:<span class="string">"男"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="json-字符串-lt-–-gt-js-对象"><a href="#json-字符串-lt-–-gt-js-对象" class="headerlink" title="json 字符串 &lt;–&gt; js 对象"></a>json 字符串 &lt;–&gt; js 对象</h4><p>基本上，所有的语言都有将 <code>json</code> 字符串转化为该语言对象的语法。<br>比如在 <code>js</code>中：</p><ul><li>JSON.parse()：将JSON字符串转化为 js 对象。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 JSON 字符串格式化为 js 对象</span></span><br><span class="line"><span class="keyword">var</span> jsObj = <span class="built_in">JSON</span>.parse(ajax.responseText);</span><br></pre></td></tr></table></figure><ul><li>JSON.stringify()：将 JS 对象转化为JSON字符串。例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> Obj = &#123;</span><br><span class="line">  name: <span class="string">"小明"</span>,</span><br><span class="line">  age: <span class="number">25</span>,</span><br><span class="line">  sex: <span class="string">"男"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Obj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 js 对象格式化为 JSON 字符串</span></span><br><span class="line"><span class="keyword">var</span> jsonStr = <span class="built_in">JSON</span>.stringify(Obj);</span><br></pre></td></tr></table></figure><p>下面就是以PHP为例将 json 字符串 &lt;–&gt; js 对象</p><ul><li><strong>json_decode()</strong>方法：将json字符串转化为变量。</li><li><strong>json_encode()</strong>方法：将变量转化为json字符串。<br>举例：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  &lt;?php</span><br><span class="line">   header(<span class="string">"Content-Type:text/html;charset=utf-8"</span>);</span><br><span class="line">   <span class="comment">// json字符串</span></span><br><span class="line">   $jsonStr = <span class="string">'&#123;"name":"小明","age":25,"sex":"男"&#125;'</span>;</span><br><span class="line">   <span class="comment">// 字符串转化为 php对象</span></span><br><span class="line">     print_r(json_decode($jsonStr));</span><br><span class="line"></span><br><span class="line">     echo <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">     <span class="comment">// php数组</span></span><br><span class="line">     $arrayName = array(<span class="string">'name'</span> =&gt;<span class="string">'littleFox'</span> ,<span class="string">'age'</span> =&gt; <span class="number">13</span> );</span><br><span class="line">     <span class="comment">// php对象 转化为 json字符串</span></span><br><span class="line">     print_r(json_encode($arrayName));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  stdClass <span class="built_in">Object</span> ( [name] =&gt; itcast [age] =&gt; <span class="number">25</span> [skill] =&gt; 男 )</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"小红"</span>,<span class="string">"age"</span>:<span class="number">24</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="ajax请求解析json例子"><a href="#ajax请求解析json例子" class="headerlink" title="ajax请求解析json例子"></a>ajax请求解析json例子</h4><p>(1) data.json<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"name"</span>:<span class="string">"小明"</span>,</span><br><span class="line">    <span class="string">"age"</span>:<span class="string">"25"</span>,</span><br><span class="line">    <span class="string">"sex"</span>:<span class="string">"男"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(2)json.php<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取json文件 并返回即可</span></span><br><span class="line">echo  file_get_contents(<span class="string">'info/Person.json'</span>);</span><br><span class="line"></span><br><span class="line"> ?&gt;</span><br></pre></td></tr></table></figure></p><p>(3)getjons.html<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">  &lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;获取 json 数据&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="button"  value="获取json" id='btnJson'&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">"&gt;</span></span><br><span class="line"><span class="string">// 获取的是一个 如果要获取多个</span></span><br><span class="line"><span class="string">// document.querySelectorAll(selector)</span></span><br><span class="line">document.querySelector("#btnJson").onclick = function () &#123;</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'get'</span>,<span class="string">'json.php'</span>);</span><br><span class="line">xhr.send();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (xhr.readyState==<span class="number">4</span>&amp;&amp;xhr.status==<span class="number">200</span>) &#123;</span><br><span class="line"><span class="comment">// json 字符串 是字符串 所以我们可以 通过  responseText获取</span></span><br><span class="line"><span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line"><span class="comment">// 转化为 js对象</span></span><br><span class="line"><span class="keyword">var</span> jsObj = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line"><span class="built_in">console</span>.log(jsObj);</span><br><span class="line"><span class="comment">// 拼接ul s</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>;</span><br><span class="line">str+=<span class="string">'&lt;ul&gt;'</span>;</span><br><span class="line">str+=<span class="string">'&lt;li&gt;'</span>+jsObj.name+<span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">str+=<span class="string">'&lt;li&gt;'</span>+jsObj.skill+<span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">str+=<span class="string">'&lt;li&gt;'</span>+jsObj.friend+<span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line">str+=<span class="string">'&lt;/ul&gt;'</span>;</span><br><span class="line"><span class="comment">// 设置到界面上</span></span><br><span class="line"><span class="built_in">document</span>.body.innerHTML = str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>演示效果：<br><img src="https://github.com/Anson212/magentoWeb/blob/master/img/ajax-json.gif?raw=true" alt="image"></p><h3 id="jQuery-中的-Ajax"><a href="#jQuery-中的-Ajax" class="headerlink" title="jQuery 中的 Ajax"></a>jQuery 中的 Ajax</h3><p><code>JQuery</code>作为最受欢迎的<code>js</code>框架之一，常见的<code>Ajax</code>已经帮助我们封装好了，只需要调用即可。更为详细的<code>api</code>文档可以查阅 <a href="http://www.w3school.com.cn/jquery/jquery_ajax_intro.asp" target="_blank" rel="noopener">w3cSchool_JQueryAjax</a></p><p>格式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">     url:<span class="string">'01.php'</span>,<span class="comment">//请求地址</span></span><br><span class="line">     data:<span class="string">'name=小明&amp;age=25'</span>,<span class="comment">//发送的数据</span></span><br><span class="line">     type:<span class="string">'GET'</span>,<span class="comment">//请求的方式</span></span><br><span class="line">     success:<span class="function"><span class="keyword">function</span> (<span class="params">argument</span>) </span>&#123;&#125;,<span class="comment">// 请求成功执行的方法</span></span><br><span class="line">     beforeSend:<span class="function"><span class="keyword">function</span> (<span class="params">argument</span>) </span>&#123;&#125;,<span class="comment">// 在发送请求之前调用,可以做一些验证之类的处理</span></span><br><span class="line">     error:<span class="function"><span class="keyword">function</span> (<span class="params">argument</span>) </span>&#123;<span class="built_in">console</span>.log(argument);&#125;,<span class="comment">//请求失败调用</span></span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure></p><p>更多关于<code>jquery-ajax</code>的文章<br><a href="https://api.jquery.com/jquery.ajax/" target="_blank" rel="noopener">jQuery.ajax()</a></p>]]></content>
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>同源和跨域</title>
      <link href="/2017/07/11/Ajax/%E5%90%8C%E6%BA%90%E5%92%8C%E8%B7%A8%E5%9F%9F/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/domain.jpg?raw=true" alt="image"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>众所周知浏览器的同源策略及跨域的方法在前端面试中也是出场率极高的问题，本文主要跟大家分享了关于前端面试时会遇到的同源和跨域问题，下面话不多说了，来一起看看详细的介绍吧。</p><h2 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h2><h2 id="同源"><a href="#同源" class="headerlink" title="同源"></a>同源</h2><p>同源策略是浏览器的一种安全策略，所谓同源是指，域名，协议，端口完全相同。<br><a id="more"></a> </p><h2 id="跨域问题的解决方案"><a href="#跨域问题的解决方案" class="headerlink" title="跨域问题的解决方案"></a>跨域问题的解决方案</h2><ol><li>JSONP:script 标签的 src 属性传递数据。</li><li>iframe 元素会创建包含另外一个文档的内联框架（即行内框架）  </li><li>代理：如vue-cli项目中的config/index.js文件中的proxyTable设置所要跨域访问的地址</li></ol><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p><code>JSONP(JSON with Padding)</code>：带补丁的 <code>json</code>，本质是利用了 <code>&lt;script src=&quot;&quot;&gt;&lt;/script&gt;</code>标签具有可跨域的特性，由服务端返回一个预先定义好的JS函数的调用，并且将服务器数据以该函数参数的形式传递过来。此方法需要前后端配合完成。<br><code>html</code>标签的 <code>src</code> 属性是支持跨域的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"http://www.lolint.com/images/avatar.jpg"</span> alt=<span class="string">""</span>&gt;</span><br></pre></td></tr></table></figure></p><p><code>jsonp</code> 就是利用这个特性实现的跨域，但用的是 <code>script</code> 标签。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="string">`jsonp`</span> 就是 利用<span class="string">`src`</span>，实现的跨域 用的是 <span class="string">`script`</span>标签 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>  src=<span class="string">'http://192.168.141.137/2018-02-28/myData.php'</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br></pre></td></tr></table></figure></p><p>上方那一行的代码，意思是：刷新<code>A</code>服务器上的<code>index</code>页面后，会去请求 <code>B</code> 服务器上的 <code>myData.php</code> 这个页面。而且请求的方式是 <code>get</code> 请求。<br>但是 <code>B</code> 服务器上的页面不是你想请求就可以请求的，大家一起配合才可以。<br><strong>具体实现步骤：</strong><br>需要首先声明的是，<code>jsonp</code> 只能通过 <code>GET</code> 方式进行请求。<br>（1）<code>A</code>客户端的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Document&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>html&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 eatFood()方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'我被调用了哦'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- 使用 `script`标签 发送了 `get`请求 去到了一个 `php`页面 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;script type="text/</span>javascript<span class="string">" src='http://192.168.141.137/01.php?callback1=fn'&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们来分析上方代码中的最后一行的那个<code>url：A</code>客户端请求的是 <code>B</code>服务器上的 <code>01.php</code>页面。<code>url</code>里有个<code>callback1=fn</code>，意思是：<code>callback1</code>是<code>A</code>和<code>B</code> 之间的约定，约定后，将执行方法 <code>fn</code>。</p><p>其实，<code>fn</code>方法已经在最后一行代码中执行了。只不过，<code>fn</code>方法里的<code>data</code>数据，是从 <code>B</code> 服务器中获取的。<br>（2）<code>B</code>服务器端的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    $mycallBack = $_GET[<span class="string">'callback1'</span>];</span><br><span class="line"></span><br><span class="line">$arr = array(<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"zhaoliu"</span>);</span><br><span class="line"></span><br><span class="line">    echo $mycallBack.<span class="string">`(`</span>.json_encode($arr).<span class="string">`)`</span>;    <span class="comment">//字符串拼接</span></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p><p><strong>代码解释：</strong><br>第一行的<code>callback1</code> 是<code>A</code>和<code>B</code>之间的约定，二者必须一致。</p><p><code>echo</code>语句中输出的内容，即使要返回给<code>A</code>客户端的内容，此内容会保存在 <code>A</code>客户端的<code>fn</code>方法的<code>data</code>里。 <code>data[0]</code>指的是 <code>zhangsan</code>。<br><code>json_encode</code>指的是，将php对象转化为 <code>json</code>。<br>刷新A页面，输出结果为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycallBack([<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"zhaoliu"</span>])</span><br></pre></td></tr></table></figure></p><h2 id="配置proxyTable解决跨域问题"><a href="#配置proxyTable解决跨域问题" class="headerlink" title="配置proxyTable解决跨域问题"></a>配置proxyTable解决跨域问题</h2><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/vue-cli1.jpg?raw=true" alt="image"></p><p>我们使用<code>vue-cli</code>生成的项目目录里，<code>config</code>下面的<code>index.js</code>有个<code>proxyTable</code>属性</p><p>然后我们做如下设置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">   <span class="comment">// 这里可以理解为使用"/api" 代替 "target" 里的地址，</span></span><br><span class="line">  <span class="comment">// 比如说我们要调用的地址是 http://www.example.com/api/list,   则写成 /api/list 就可以了</span></span><br><span class="line">   <span class="string">'/api'</span>: &#123;</span><br><span class="line">     target: <span class="string">'http://www.example.com'</span>,  <span class="comment">// 你请求的api地址</span></span><br><span class="line">     secure: <span class="literal">false</span>,                    <span class="comment">// 如果是https接口，需要配置这个参数</span></span><br><span class="line">     changeOrigin: <span class="literal">true</span>        <span class="comment">//这个参数是用来回避跨站问题的，配置完之后发请求时会自动修改http header里面的host</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure></p><p>注意以上配置只在开发环境起作用<br><code>webpack-dev-server</code>更加详细的配置: <a href="https://webpack.js.org/configuration/dev-server/#devserver-proxy" target="_blank" rel="noopener">https://webpack.js.org/configuration/dev-server/#devserver-proxy</a></p><p><strong>那么为什么我们设置这个proxyTable可以帮我们解决跨域问题呢？</strong></p><p>其实<code>vue-cli</code>里的这个设置来自于其集成的插件 <code>http-proxy-middleware</code></p><p><code>github</code>: <a href="https://github.com/chimurai/http-proxy-middleware" target="_blank" rel="noopener">https://github.com/chimurai/http-proxy-middleware</a></p><p>这个插件可以帮我们在本地虚拟一个服务器接收请求并代替你发送该请求，因为是在服务端替我们发请求所以就没有我们烦恼的跨域问题了，当然这只适用于开发环境。  </p><p><strong>项目上线怎么办？</strong></p><p>我们通过配置<code>proxyTable</code>解决了本地开发环境请求接口跨域的问题，但是我们项目上线还是要替换成线上的接口地址的。如果我们的前端项目合后端服务不在同一个域名下，我们可以使用目前比较流行的 <code>CORS</code> 来处理跨域。这里就不展开讲了。   </p><p>我们可以利用<code>webpack</code>配置的环境变量来实现开发环境和打包后的<code>api</code>区分<br>假设我们使用<code>axios</code>进行请求发送</p><p>我们可以做如下配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  timeout: <span class="number">60000</span>，</span><br><span class="line">  withCredentials: <span class="literal">true</span>        <span class="comment">// 访问线上api时axios发送跨域请求时需要设置这个参数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'development'</span>) &#123;</span><br><span class="line">  <span class="comment">// 开发环境</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(process.env.NODE_ENV === <span class="string">'production'</span>) &#123;</span><br><span class="line">  <span class="comment">// 生产环境</span></span><br><span class="line">  config.baseURL = <span class="string">"http://www.baidu.com"</span>;   <span class="comment">//这里是线上api请求地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> server = axios.create(config);</span><br></pre></td></tr></table></figure></p><p>这样配置后我们开发环境中就可以使用<code>proxyTable</code>代理请求，项目打包后请求地址就会被替换成线上的<code>api</code>地址。<br>假设我们开发环境请求的<code>api</code>地址为 <a href="http://www.example.com/api/list" target="_blank" rel="noopener">http://www.example.com/api/list</a><br>线上环境请求的<code>api</code>地址为 <a href="http://www.baidu.com/api/list" target="_blank" rel="noopener">http://www.baidu.com/api/list</a><br>那么我们发请求的时候只需要这么写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.get(<span class="string">"/api/list"</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>项目打包后，<code>webpack</code>就可以自动帮我们把请求地址替换成线上的地址了。</p>]]></content>
      
      <categories>
          
          <category> ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序通过api接口将json数据展现到小程序示例</title>
      <link href="/2017/07/10/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E9%80%9A%E8%BF%87api%E6%8E%A5%E5%8F%A3%E5%B0%86json%E6%95%B0%E6%8D%AE%E5%B1%95%E7%8E%B0%E5%88%B0%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%A4%BA%E4%BE%8B/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/xiaocx.jpg?raw=true" alt="image"></p><h1 id="用到的知识"><a href="#用到的知识" class="headerlink" title="用到的知识"></a>用到的知识</h1><ol><li><code>wx.request</code> 请求接口资源(微信小程序api的发起请求部分)</li><li><code>swiper</code>实现轮播图的组件</li><li><code>wx:for</code> 循环语句</li><li>微信小程序的基础知识</li></ol><a id="more"></a> <h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>首先看一下这个请求函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wx.request(&#123;</span><br><span class="line">    <span class="comment">//请求地址</span></span><br><span class="line">    url:<span class="string">"https://locally.uieee.com/xxx"</span>,</span><br><span class="line">    <span class="comment">//请求的参数</span></span><br><span class="line">    data：&#123;&#125;,</span><br><span class="line">    <span class="comment">//设置请求的header</span></span><br><span class="line">    header:&#123;&#125;,</span><br><span class="line">    <span class="comment">//请求方式</span></span><br><span class="line">    method:<span class="string">"GET"</span>,</span><br><span class="line">    <span class="comment">//数据类型</span></span><br><span class="line">    dataType:<span class="string">'json'</span>,</span><br><span class="line">    <span class="comment">//成功请求执行的回调函数</span></span><br><span class="line">    success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//请求失败执行的回调函数</span></span><br><span class="line">    fail:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//接口调用结束的回调函数 (调用成功、失败都会执行)</span></span><br><span class="line">    complete:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="1-接口数据"><a href="#1-接口数据" class="headerlink" title="1.接口数据"></a>1.接口数据</h2><p>接口数据的<code>json</code>格式的开头<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"state"</span>:<span class="string">"0"</span>,</span><br><span class="line"><span class="string">"stories"</span>:[</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">image</span>: <span class="string">"http://ww1.sinaimg.cn/mw690/006ThXL5ly1fj7zx3w751j30u00dmgy3.jpg"</span>&#125;,</span><br><span class="line">&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">image</span>: <span class="string">"http://ww1.sinaimg.cn/mw690/006ThXL5ly1fj6ckx9tlwj30u00fqk8n.jpg"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h2 id="2-index-js"><a href="#2-index-js" class="headerlink" title="2. index.js"></a>2. index.js</h2><p>在<code>index.js</code>里获取数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// pages/profile/profile.js</span></span><br><span class="line">Page(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面的初始数据</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  data: &#123;</span><br><span class="line">      duration: <span class="number">2000</span>,</span><br><span class="line">      indicatorDots: <span class="literal">true</span>,</span><br><span class="line">      autoplay: <span class="literal">true</span>,</span><br><span class="line">      interval: <span class="number">3000</span>,</span><br><span class="line">      loading: <span class="literal">false</span>,</span><br><span class="line">      plain: <span class="literal">false</span>,</span><br><span class="line">      sliderList:[]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> _this = <span class="keyword">this</span>; <span class="comment">//不要漏了这句，很重要滴！！！</span></span><br><span class="line">       wx.request(&#123;</span><br><span class="line">           url:<span class="string">"https://locally.uieee.com/xxx"</span>,</span><br><span class="line">           headers: &#123;</span><br><span class="line">           <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span></span><br><span class="line">          &#125;,</span><br><span class="line">           success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">               <span class="comment">/**</span></span><br><span class="line"><span class="comment">               *  this.setData 有两个功能：</span></span><br><span class="line"><span class="comment">               *  1. 更新数据</span></span><br><span class="line"><span class="comment">               *  2. 更新视图</span></span><br><span class="line"><span class="comment">               */</span></span><br><span class="line">               <span class="comment">//将获取到的json数据，存在名字叫sliderList的这个数组中</span></span><br><span class="line">               _this.setData(&#123;</span><br><span class="line">                   sliderList:res.data</span><br><span class="line">               &#125;)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面相关事件处理函数--监听用户下拉动作</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 页面上拉触底事件的处理函数</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 用户点击右上角分享</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="index-wxml"><a href="#index-wxml" class="headerlink" title="index.wxml"></a>index.wxml</h2><p>在<code>index.wxml</code>中渲染<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">'slider'</span>&gt;</span><br><span class="line">    &lt;swiper indicator-dots=<span class="string">"&#123;&#123;indicatorDots&#125;&#125;"</span>autoplay=<span class="string">"&#123;&#123;autoplay&#125;&#125;"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"banners"</span> interval=<span class="string">"&#123;&#123;interval&#125;&#125;"</span> duration=<span class="string">"&#123;&#123;duration&#125;&#125;"</span>&gt;</span><br><span class="line">        &lt;swiper-item wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123; sliderList &#125;&#125;"</span> wx:key=<span class="string">"id"</span> &gt;</span><br><span class="line">            &lt;image src=<span class="string">"&#123;&#123; item.image &#125;&#125;"</span> width=<span class="string">"375"</span> height=<span class="string">"150"</span>  mode=<span class="string">"aspectFill"</span> lazy-load /&gt;</span><br><span class="line">        &lt;<span class="regexp">/swiper-item&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>swiper&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flex布局学习和总结</title>
      <link href="/2017/06/11/flex/flex-conclusion/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flexbox.jpg?raw=true" alt="image">  </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>很长一段时间, 我知道有<code>flex</code>这个布局方式, 但是始终没有去学它.  </p><p>最近由于学习小程序，发现里面需要使用<code>flex</code>布局, 于是决定学习一下. </p><a id="more"></a> <p>在拜读了阮一峰的<code>flex</code>布局教程和<code>HaoyCn</code>有关<code>flex</code>属性的回答后整理成此文章，以便加深印象。  </p><h1 id="什么是flex"><a href="#什么是flex" class="headerlink" title="什么是flex"></a>什么是flex</h1><p><code>Flexbox Layout</code>，官方名为 <code>CSS Flexible Box Layout Module</code>, 意为”弹性布局”，是<code>CSS3</code>中引入的一种更加灵活高效的布局/对齐/排序方式(还有一种更适合大型布局的网格布局<code>CSS Grid Layout Module</code>). <code>flex</code>是<code>flexible</code>的缩写.  </p><p>任何一个容器都可以指定为<code>flex</code>布局。   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   display: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行内元素也可以使用<code>flex</code>布局。    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   display: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="flex的基本概念"><a href="#flex的基本概念" class="headerlink" title="flex的基本概念"></a>flex的基本概念</h1><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex01.jpg?raw=true" alt="image">     </p><p>1、采用<code>flex</code>布局的元素被称为<code>flex</code><strong>容器</strong><code>（flex container）</code>，他的子元素即为<code>flex</code>元素<code>（flex item）</code>。<br>2、<code>flex</code>容器中包含两个相互垂直的轴，即<strong>主轴</strong>（main axis）和<strong>副轴</strong><code>（cross axis)</code>。<br>3、flex元素沿主轴从<strong>主轴起点</strong> <code>(main start)</code>到<strong>主轴终点 </strong><code>(main end)</code>依次排布。<br>4、如果<code>flex</code>容器包含多行<code>flex</code>元素，则<code>flex</code>行<code>（flex lines）</code>沿<strong>副轴</strong>从<strong>副轴起点</strong><code>（cross start）</code>到<strong>副轴</strong>终点<code>（cross end)</code>依次排布。<br>5、单个<code>flex</code>元素占据的主轴空间叫做<strong>主轴程度</strong><code>（main size）</code>，占据的副轴空间叫做<strong>副轴</strong>长度<code>（cross size）</code>。   </p><h1 id="flex的兼容性"><a href="#flex的兼容性" class="headerlink" title="flex的兼容性"></a>flex的兼容性</h1><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex02.jpg?raw=true" alt="image"></p><h1 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h1><h2 id="用于flex容器的属性"><a href="#用于flex容器的属性" class="headerlink" title="用于flex容器的属性"></a>用于flex容器的属性</h2><p>以下6个属性设置在容器上    </p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>flex-direction</td><td>主轴方向</td></tr><tr><td>flex-wrap</td><td>换行样式</td></tr><tr><td>flex-flow</td><td>前两个的简写形式</td></tr><tr><td>justify-content</td><td>主轴对齐方式</td></tr><tr><td>align-items</td><td>单行的副轴对齐方式</td></tr><tr><td>align-content</td><td>多行的副轴对齐方式</td></tr></tbody></table><p>注意：<br><code>flex</code>容器的<code>column-*</code>属性会失效。<br><code>flex</code>容器无法拥有<code>::first-line</code>和 <code>::first-letter</code>虚元素。   </p><h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><p><code>flex-direction</code> 属性决定主轴方向(即项目的排序方向)。</p><table><thead><tr><th>含义</th><th>主轴方向</th></tr></thead><tbody><tr><td>可选值</td><td>row 、row-reverse 、 column 、 column-reverse</td></tr><tr><td>默认值</td><td>row</td></tr><tr><td>row</td><td>主轴为水平方向，七点在左端。</td></tr><tr><td>row-reverse</td><td>主轴为水平方向，起点在右端。</td></tr><tr><td>column</td><td>主轴为垂直方向，起点在上沿。</td></tr><tr><td>column-reverse</td><td>主轴为垂直方向，起点在下沿。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-direction: row  | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex03.jpg?raw=true" alt="image"> </p><h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex04.jpg?raw=true" alt="image"> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它可能取三个值    </p><p>（1）<code>nowrap</code>（默认）：不换行。<br><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex05.jpg?raw=true" alt="image"> </p><p>（2）<code>wrap</code>：换行，第一行在上方。<br><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex06.jpg?raw=true" alt="image">  </p><p>（3）<code>wrap-reverse</code>：换行，第一行在下方。<br> <img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex07.jpg?raw=true" alt="image"></p><h2 id="flex-flow属性"><a href="#flex-flow属性" class="headerlink" title="flex-flow属性"></a>flex-flow属性</h2><p><code>flex-flow</code>属相是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为 <code>row nowrap</code>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  flex-flow:&lt;flex-direction&gt;||&lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><p>它可能取5个值，具体对齐方式与轴的方向有关，下面假设主轴为从左到右。    </p><table><thead><tr><th>值</th><th>主轴方向</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值：左对齐</td></tr><tr><td>flex-end</td><td>右对齐</td></tr><tr><td>center</td><td>居中</td></tr><tr><td>space-between</td><td>两端对齐，项目之间的间隔都相等。</td></tr><tr><td>space-around</td><td>每个项目两侧的间隔相等。所以，项目之间比项目与边框的间隔大一倍。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex08.jpg?raw=true" alt="image">  </p><h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。<br>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。   </p><table><thead><tr><th>值</th><th>主轴方向</th></tr></thead><tbody><tr><td>flex-start</td><td>交叉轴的起点对齐。</td></tr><tr><td>flex-end</td><td>交叉轴的终点对齐。</td></tr><tr><td>center</td><td>交叉轴的中点对齐。</td></tr><tr><td>baseline</td><td>项目的第一行文字的基线对齐。</td></tr><tr><td>stretch</td><td>（默认值）:如果项目未设置高度或设为<code>auto</code>，将占满整个容器的高度。   </td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">  align-items: flex-start  |  flex-end  |  center  |  baseline | stretch; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex09.jpg?raw=true" alt="image">  </p><h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。<br>该属性可能取6个值。</p><table><thead><tr><th>值</th><th>主轴方向</th></tr></thead><tbody><tr><td>flex-start</td><td>与交叉轴的起点对齐。</td></tr><tr><td>flex-end</td><td>与交叉轴的终点对齐。</td></tr><tr><td>center</td><td>与交叉轴的中点对齐。</td></tr><tr><td>space-between</td><td>与交叉轴两端对齐。轴线之间的间隔平均分布。</td></tr><tr><td>space-around</td><td>每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</td></tr><tr><td>stretch</td><td>（默认值）：轴线占满整个交叉轴。      </td></tr></tbody></table><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex10.jpg?raw=true" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="用于flex元素的属性"><a href="#用于flex元素的属性" class="headerlink" title="用于flex元素的属性"></a>用于flex元素的属性</h1><p>这类属性有6种，分别为:</p><table><thead><tr><th>属性</th><th>含义</th></tr></thead><tbody><tr><td>order</td><td>排列顺序。</td></tr><tr><td>align-self</td><td>flex元素的副轴对齐方式，对应与flex容器的<code>align-items</code>。</td></tr><tr><td>flex-grow</td><td>放大比例。</td></tr><tr><td>flex-shrink</td><td>缩小比例。</td></tr><tr><td>flex-basis</td><td>初始大小。</td></tr><tr><td>flex</td><td>（上面三个的简写形式。）</td></tr></tbody></table><p><strong>注意：</strong><code>flex</code>元素的 <code>float</code>，<code>clear</code>和<code>vertical-align</code>会失效。</p><h2 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h2><p><code>order</code>属性定义项目的排序顺序。数值越小，排列越靠前，默认为0.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   order:&lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex11.jpg?raw=true" alt="image"></p><h2 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h2><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   align-self:&#123; auto | flex-start | flex-end | center | baseline | stretch &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex12.jpg?raw=true" alt="image"></p><h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h2><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p><p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-grow:&lt;number&gt;; /*default 0*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex13.jpg?raw=true" alt="image"></p><h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h2><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，盖项目将缩小。<br><code>flex-shrink</code>为 0 则表示，即使<code>flex</code>容器空间不足，该<code>flex</code>元素也不缩小。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box&#123;</span><br><span class="line">   flex-shrink:&lt;number&gt;; /* default 1 */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/flex14.jpg?raw=true" alt="image"></p><h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h2><table><thead><tr><th>含义</th><th>初始大小</th></tr></thead><tbody><tr><td>可选值</td><td>auto、<length>(非负值)。</length></td></tr><tr><td>默认值</td><td>auto。</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.box &#123;</span><br><span class="line">   flex-basis: &lt;length&gt; | auto; /* default auto */</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flex-basis</code>定义了分配剩余空间之前<code>flex</code>元素的初始大小，可为长度值（如 20%，5rem等）或 <code>auto</code>等关键词。<br><code>flex-basis: auto</code>表示, 以<code>flex</code>元素的主轴长度为<code>flex-basis</code>. 若flex元素的主轴长度也是<code>auto</code>, 则以<code>flex</code>元素内容(即所有子元素)的大小为<code>flex-basis</code>。</p><h2 id="flex属性-1"><a href="#flex属性-1" class="headerlink" title="flex属性"></a>flex属性</h2><table><thead><tr><th>含义</th><th><code>flex-grow</code>, <code>flex-shrink</code>和<code>flex-basis</code>的简写形式</th></tr></thead><tbody><tr><td>可选值</td><td>none [ &lt;‘flex-grow’&gt; &lt;‘flex-shrink’&gt;?、&lt;‘flex-basis’&gt; ]</td></tr><tr><td>默认值</td><td>0 1 auto</td></tr></tbody></table><ul><li>||用来分割两个或多个选项, 从中选取一个或多个, 不限次序.</li><li>|用来分割两个或多个选项, 从中选取一个.</li><li>[]只是用来分组的.</li><li>?代表可选.</li></ul><p>举例来说, a | [ b || c ]包含的可能情况有a, b, c, b c, c b.<br>现在回过头来再看<code>none</code> | [ &lt;‘flex-grow’&gt; &lt;‘flex-shrink’&gt;? || &lt;‘flex-basis’&gt; ]就清晰多了.<br>注意, <code>none</code>是一个特殊值, 相当于<code>0 0 auto</code>.<br>另外, 如果<code>flex</code>中不指定:</p><ul><li><code>flex-grow</code>成员, 则<code>flex-grow</code>会被置为1.</li><li><code>flex-shrink</code>成员, 则<code>flex-shrink</code>会被置为1.</li><li><code>flex-basis</code>成员, 则flex-basis会被置为0.<br>注意: <code>flex</code>的初始值是0 1 auto, 即由每个<code>flex</code>因子本身的默认值组成(比方说<code>flex-grow</code>的默认值就是0).</li></ul>]]></content>
      
      <categories>
          
          <category> Flex </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS常见的几种布局</title>
      <link href="/2017/05/11/css/CSS-layout/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/csshtml.jpg?raw=true" alt="image"></p><h1 id="单列布局"><a href="#单列布局" class="headerlink" title="单列布局"></a>单列布局</h1><p>常见的单列布局有两种方法：  </p><ul><li><code>header</code>，<code>content</code>，<code>footer</code>等宽的单列布局 </li><li><code>header</code>与<code>footer</code>等宽，<code>content</code> 略窄的单列布局<a id="more"></a><strong>第一种</strong> 代码如下</li></ul><p><strong>index.html</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"footer"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>style.css</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.header&#123;</span><br><span class="line">    margin:<span class="number">0</span> auto; </span><br><span class="line">    max-width: <span class="number">960</span>px;</span><br><span class="line">    height:<span class="number">100</span>px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    max-width: <span class="number">960</span>px;</span><br><span class="line">    height: <span class="number">400</span>px;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">.footer&#123;</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    max-width: <span class="number">960</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>第二种</strong> 代码如下<br><strong>index.html</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"nav"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="content"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"footer"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>style.css</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.header&#123;</span><br><span class="line">    margin:<span class="number">0</span> auto;</span><br><span class="line">    max-width: <span class="number">960</span>px;</span><br><span class="line">    height:<span class="number">100</span>px;</span><br><span class="line">    background-color: blue;</span><br><span class="line">&#125;</span><br><span class="line">.nav&#123;</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    max-width: <span class="number">800</span>px;</span><br><span class="line">    background-color: darkgray;</span><br><span class="line">    height: <span class="number">50</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.content&#123;</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    max-width: <span class="number">800</span>px;</span><br><span class="line">    height: <span class="number">400</span>px;</span><br><span class="line">    background-color: aquamarine;</span><br><span class="line">&#125;</span><br><span class="line">.footer&#123;</span><br><span class="line">    margin: <span class="number">0</span> auto;</span><br><span class="line">    max-width: <span class="number">960</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    background-color: aqua;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="两列自适应布局"><a href="#两列自适应布局" class="headerlink" title="两列自适应布局"></a>两列自适应布局</h1><p>两列自适应布局是指一列由内容撑开，另一列撑满剩余宽度的布局方式</p><h3 id="float-overflow-hidden"><a href="#float-overflow-hidden" class="headerlink" title="float+overflow:hidden"></a><code>float+overflow:hidden</code></h3><p>如果是普通的两列布局，浮动+普通元素的<code>margin</code>便可以实现，但如果是自适应的两列布局，利用<code>float+overflow:hidden</code>便可以实现，这种办法主要通过<code>overflow</code>触发<code>BFC</code>,而<code>BFC</code>不会重叠浮动元素。由于设置<code>overflow:hidden</code>并不会触发<code>IE6</code>-浏览器的<code>haslayout</code>属性，所以需要设置<code>zoom:1</code>来兼容<code>IE6</code>-浏览器。具体代码如下：</p><p><strong>index.html</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;</span><br><span class="line">        &lt;p&gt;left&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">        &lt;p&gt;right&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;right&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;        </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>style.css</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.parent &#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  zoom: <span class="number">1</span>;</span><br><span class="line">  background-color: lightgrey;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">  float: left;</span><br><span class="line">  margin-right: <span class="number">20</span>px;</span><br><span class="line">  background-color: lightblue;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  zoom: <span class="number">1</span>;</span><br><span class="line">  background-color: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意点:如果侧边栏在右边时，注意渲染顺序。即在<code>HTML</code>中，先写侧边栏后写主内容</p><h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><p><code>Flex</code>布局，也叫弹性盒子布局</p><p><strong>index.html</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;</span><br><span class="line">        &lt;p&gt;left&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">        &lt;p&gt;right&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;right&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;        </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>style.css</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.parent &#123;</span><br><span class="line">  display:flex;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">  background-color: lightblue;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">  margin-left:<span class="number">20</span>px; </span><br><span class="line">  flex:<span class="number">1</span>;</span><br><span class="line">  background-color: lightgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h3><p><code>Grid</code>布局，是一个基于网格的二维布局系统，目的是用来优化用户界面设计。</p><p><strong>index.html</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"parent"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;</span><br><span class="line">        &lt;p&gt;left&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;</span><br><span class="line">        &lt;p&gt;right&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;p&gt;right&lt;/</span>p&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;        </span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>style.css</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.parent &#123;</span><br><span class="line">  display:grid;</span><br><span class="line">  grid-template-columns:auto <span class="number">1</span>fr;</span><br><span class="line">  grid-gap:<span class="number">20</span>px</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="三栏布局"><a href="#三栏布局" class="headerlink" title="三栏布局"></a>三栏布局</h3><p>特征：中间列自适应宽度，旁边两侧固定宽度，实现三栏布局有多种方式（可以猛戳实现三栏布局的几种方法),本文着重介绍圣杯布局和双飞翼布局。  </p><h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><blockquote><p>特点</p></blockquote><p>比较特殊的三栏布局，同样也是两边固定宽度，中间自适应，唯一区别是<code>dom</code>结构必须是先写中间列部分，这样实现中间列可以优先加载。   </p><p><strong>index.html</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"left"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>style.css</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.container &#123;</span><br><span class="line">    margin-left: <span class="number">120</span>px;</span><br><span class="line">    margin-right: <span class="number">220</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">    height:<span class="number">300</span>px;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    left: <span class="number">-120</span>px;</span><br><span class="line">    float: left;</span><br><span class="line">    height: <span class="number">300</span>px;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    margin-left: <span class="number">-100</span>%;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    right: <span class="number">-220</span>px;</span><br><span class="line">    float: right;</span><br><span class="line">    height: <span class="number">300</span>px;</span><br><span class="line">    width: <span class="number">200</span>px;</span><br><span class="line">    margin-left: <span class="number">-200</span>px;</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>缺点</p></blockquote><p><code>center</code>部分的最小宽度不能小于left部分的宽度，否则会<code>left</code>部分掉到下一行</p><p>如果其中一列内容高度拉长(如下图)，其他两列的背景并不会自动填充。(借助伪等高布局可解决)</p><p><strong>伪等高布局 如下：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">.main,</span><br><span class="line">.left,</span><br><span class="line">.right &#123;</span><br><span class="line">  padding-bottom: <span class="number">10000</span>px;</span><br><span class="line">  margin-bottom: <span class="number">-10000</span>px;</span><br><span class="line">&#125;</span><br><span class="line">.container &#123;</span><br><span class="line">  padding-left: <span class="number">220</span>px;</span><br><span class="line">  padding-right: <span class="number">220</span>px;</span><br><span class="line">  overflow: hidden;<span class="comment">//把溢出背景切掉</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><blockquote><p>特点</p></blockquote><p>同样也是三栏布局，在圣杯布局基础上进一步优化，解决了圣杯布局错乱问题，实现了内容与布局的分离。而且任何一栏都可以是最高栏，不会出问题。</p><blockquote><p>缺点</p></blockquote><p>多加一层 dom 树节点，增加渲染树生成的计算量。</p><p><strong>index.html</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"content"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"main"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div class="left"&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"right"</span>&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong>style.css</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    float: left;</span><br><span class="line">    width: <span class="number">100</span>%;</span><br><span class="line">&#125;</span><br><span class="line">.main &#123;</span><br><span class="line">    height: <span class="number">200</span>px;</span><br><span class="line">    margin-left: <span class="number">110</span>px;</span><br><span class="line">    margin-right: <span class="number">220</span>px;</span><br><span class="line">    background: green;</span><br><span class="line">&#125;</span><br><span class="line">.main::after &#123;</span><br><span class="line">    content: <span class="string">''</span>;</span><br><span class="line">    display: block;</span><br><span class="line">    font-size:<span class="number">0</span>;</span><br><span class="line">    height: <span class="number">0</span>;</span><br><span class="line">    zoom: <span class="number">1</span>;</span><br><span class="line">    clear: both;</span><br><span class="line">&#125;</span><br><span class="line">.left &#123;</span><br><span class="line">    float:left;</span><br><span class="line">    height: <span class="number">200</span>px;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    margin-left: <span class="number">-100</span>%;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">.right &#123;</span><br><span class="line">    float: right;</span><br><span class="line">    height: <span class="number">200</span>px;</span><br><span class="line">    width: <span class="number">200</span>px;</span><br><span class="line">    margin-left: <span class="number">-200</span>px;</span><br><span class="line">    background: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>【读书】《锋利的jQuery》</title>
      <link href="/2017/03/10/jquery/sharp-jquery/"/>
      <content type="html"><![CDATA[<p><img src="https://github.com/Anson212/magentoWeb/blob/master/img/jq.jpg?raw=true" alt="image"></p><p>通过对《锋利的jQuery》（第二版）一书的学习，发现此书讲解通俗易懂，是学习jQuery的一本很好的指导书，特作如下总结。此书主要讲解了jQuery的常用操作，包括认识jQuery，jQuery选择器，jQuery中的DOM操作，jQuery中的事件和动画，jQuery对表单、表格的操作及更多应用，jQuery与Ajax的应用等。</p><a id="more"></a><h1 id="jQuery的优势"><a href="#jQuery的优势" class="headerlink" title="jQuery的优势"></a>jQuery的优势</h1><p>jQuery强调的理念是写得少，做的多。jQuery独特的选择器、链式操作、事件处理机制和封装完善的<br>Ajax都是其他JavaScript库望尘莫及的。概括起来，jQuery有以下优势。   </p><ul><li>轻量级   </li><li>强大的选择器   </li><li>出色的DOM操作   </li><li>可靠的事件处理机制   </li><li>完善的Ajax  </li><li>不污染顶级变量  </li><li>出色的浏览器兼容性，支持IE6.0+、Firefox3.6+、Safari5.0+、Opera、Chrome  </li><li>链式操作方式  </li><li>隐式迭代  </li><li>行为层与结构层的分离  </li><li>丰富的插件支持  </li><li>完善的文档  </li><li>开源  </li></ul><h1 id="jQuery代码的编写"><a href="#jQuery代码的编写" class="headerlink" title="jQuery代码的编写"></a>jQuery代码的编写</h1><p>在<code>jQuery</code>库中，$就是jQuery的一个简写形式，例如<code>$(&quot;#foo&quot;)</code>和<code>jQuery(&quot;#foo&quot;)</code>是等价的。<br>规范：<br>1、对于同一个对象不超过3个操作的，可以直接写在一行<br>2、对于同一个对象的较多操作，建议每行写一个操作<br>3、对于多个对象的少量操作，可以每个对象写一行，涉及子元素的，可以考虑缩进<br><strong>建议</strong>：<code>jQuery</code>对象使用$开头，例：<code>var $variable = jQuery</code>对象，<code>var variable= DOM</code>对象  </p><center><strong><code>window.onload</code> 和 <code>$(document).ready()</code> 对比</strong></center><table><thead><tr><th>-</th><th>window.onload</th><th>$(document).ready()  </th></tr></thead><tbody><tr><td>执行时间</td><td>必须等待网页中所有的内容加载完毕（）包括图片才执行</td><td>只需要 <code>DOM</code> 加载完就执行（不包括图片等）</td></tr><tr><td>编写个数</td><td>不能同时编写多个</td><td>能同时编写多个</td></tr><tr><td>简化写法</td><td>无</td><td><code>$(document).ready(function(){})</code> 可以简写成 <code>$(function(){})</code></td></tr></tbody></table><h2 id="jQuery-的链式操作风格"><a href="#jQuery-的链式操作风格" class="headerlink" title="jQuery 的链式操作风格"></a>jQuery 的链式操作风格</h2><p>用过jQuery的朋友都知道他强大的链式操作，方便，简洁，易于理解， 如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>).next().show().parent().siblings().children(<span class="string">"a"</span>).removeClass(<span class="string">"current"</span>).next().hide();</span><br></pre></td></tr></table></figure></p><p>为了进一步改善代码的可读性和可维护性可将代码改为如下格式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="keyword">this</span>).addClass(<span class="string">"current"</span>)    <span class="comment">// 给当前元素添加 "current" 样式     </span></span><br><span class="line">.next().show()                        <span class="comment">// 下一个元素显示    </span></span><br><span class="line">.parent().siblings().children(<span class="string">"a"</span>).removeClass(<span class="string">"current"</span>)   <span class="comment">// 父元素的同辈元素的子元素 &lt;a&gt; 移除 "current" 样式</span></span><br><span class="line">.next().hide();                <span class="comment">//他们的下一个元素隐藏</span></span><br></pre></td></tr></table></figure></p><h2 id="jQuery-对象和-DOM-对象"><a href="#jQuery-对象和-DOM-对象" class="headerlink" title="jQuery 对象和 DOM 对象"></a>jQuery 对象和 DOM 对象</h2><p><code>DOM</code>对象就是<code>DOM</code>树中的节点。可以通过<code>JavaScript</code>中的<code>getElementsByTagName</code>或者<code>getElementById</code>来获取元素节点。   </p><p><code>jQuery</code>对象就是通过<code>jQuery</code>包装<code>DOM</code>对象后产生的对象。   </p><p>在<code>jQuery</code>对象中违法使用<code>DOM</code>对象的任何方法。同样，<code>DOM</code>对象也不能使用<code>jQuery</code>里的方法。  </p><p>所以我们要区分什么是JavaScript原生方法，什么是<code>jQuery</code>方法。 </p><p>以下是都是错误的方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#id"</span>).innerHTML;</span><br><span class="line">$(<span class="string">"#id"</span>).checked;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"id"</span>).html();</span><br></pre></td></tr></table></figure></p><h2 id="jQuery对象和DOM对象的相互转换"><a href="#jQuery对象和DOM对象的相互转换" class="headerlink" title="jQuery对象和DOM对象的相互转换"></a>jQuery对象和DOM对象的相互转换</h2><p>在讨论<code>jQuery</code>对象和<code>DOM</code>对象的相互转换之前，先约定好定义变量的风格，如果获取的对象时<code>jQuery</code>对象，那么在变量前面加上<code>$</code>符号。  </p><h3 id="jQuery-对象转化为-DOM-对象"><a href="#jQuery-对象转化为-DOM-对象" class="headerlink" title="jQuery 对象转化为 DOM 对象"></a>jQuery 对象转化为 DOM 对象</h3><p><code>jQuery</code>对象不能使用DOM中的方法，<code>jQuery</code>提供了两种方法将一个<code>jQuery</code>对象转换DOM对象，即<code>[index]</code>和<code>get（index）</code>。</p><p>（1）<code>jQuery</code>对象是一个类似数组的对象，可以通过<code>[index]</code>得到相应<code>DOM</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $cr = $(<span class="string">"#cr"</span>);     <span class="comment">//jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> cr = $cr[<span class="number">0</span>];        <span class="comment">//将jQuery对象转为DOM对象</span></span><br><span class="line"><span class="built_in">console</span>.log(cr);        <span class="comment">//查看是否转换成功</span></span><br></pre></td></tr></table></figure><p>（2）通过<code>get(index)</code>得到。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $cr = $(<span class="string">"#cr"</span>);     <span class="comment">//jQuery对象</span></span><br><span class="line"><span class="keyword">var</span> cr = $cr.get(<span class="number">0</span>);    <span class="comment">//DOM对象</span></span><br><span class="line"><span class="built_in">console</span>.log(cr);        <span class="comment">//查看是否转换成功</span></span><br></pre></td></tr></table></figure></p><h3 id="DOM-对象转化为-jQuery-对象"><a href="#DOM-对象转化为-jQuery-对象" class="headerlink" title="DOM 对象转化为 jQuery 对象"></a>DOM 对象转化为 jQuery 对象</h3><p>只需要使用<code>$()</code>将<code>DOM</code>对象包装起来即可得到<code>jQuery</code>对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cr = <span class="built_in">document</span>.getElementById(<span class="string">"cr"</span>);          <span class="comment">//DOM对象</span></span><br><span class="line"><span class="keyword">var</span> $cr = $(cr);                                 <span class="comment">//将DOM对象转换jQuery对象</span></span><br></pre></td></tr></table></figure><p><strong>注</strong>：<code>DOM</code>对象只能使用<code>DOM</code>方法，<code>jQuery</code>对象只能使用<code>jQuery</code>的方法。</p><h3 id="解决-jQuery-和其他库的冲突"><a href="#解决-jQuery-和其他库的冲突" class="headerlink" title="解决 jQuery 和其他库的冲突"></a>解决 jQuery 和其他库的冲突</h3><p>在 <code>jQuery</code> 库中，几乎所有的插件都被限制在它的命名空间里。通常，全局对象都被很好地储存在 <code>jQuery</code> 的命名空间里。因此和其他库一起使用时，不会引起冲突。<br><strong>注</strong>：默认情况下，<code>jQuery</code>用<code>$</code>作为自身的快捷方式。</p><p>1、jQuery库在其他库之后导入 </p><p><strong>（1）在其他库和<code>jQuery</code>库加载完毕之后，可以在任何时候调用<code>jQuery.noConflict()</code>函数将变量$的控制权移交其他的<code>JavaScript</code>库。</strong><br><strong>例</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 引入prototype库 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"lib/prototype.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;!-- 引入jQuery库 --&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"lib/jQuery.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    jQuery.noConflict();    <span class="comment">//将变量$的控制权移交给prototype.js</span></span><br><span class="line">    jQuery(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;      <span class="comment">//使用jQuery</span></span><br><span class="line">        jQuery(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(jQuery(<span class="keyword">this</span>).text());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>; <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>（2）想确保jQuery不与其他库冲突，又想自定义快捷方式</strong>：<br><strong>例</strong>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    <span class="keyword">var</span> $j = jQuery.noConflict();   <span class="comment">//自定义快捷方式</span></span><br><span class="line">    $j(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                  <span class="comment">//使用jQuery，利用自定义快捷方式  $j</span></span><br><span class="line">        $j(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert.($j(<span class="keyword">this</span>).text());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>; <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>（3）如果你还想继续使用 $ 而不管其他函数的 $() 方法，同时又不想与其他库冲突，那么你可以</strong><br>其一、<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    jQuery.noConflict();                 <span class="comment">//将变量$的控制权移交给prototype.js</span></span><br><span class="line">    jQuery(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;                  <span class="comment">//使用jQuery设定页面加载时执行的函数</span></span><br><span class="line">        $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;         <span class="comment">//函数内部继续使用$()</span></span><br><span class="line">            alert.($(<span class="keyword">this</span>).text());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>;      <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>其二、<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">    jQuery.noConflict();                 <span class="comment">//将变量$的控制权移交给prototype.js</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;                        <span class="comment">//定义匿名函数</span></span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                    <span class="comment">//匿名函数内部的$均为jQuery</span></span><br><span class="line">            $(<span class="string">"p"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                alert.($(<span class="keyword">this</span>).text());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)(jQuery);                          <span class="comment">//执行匿名函数且传递实参jQuery</span></span><br><span class="line">    $(<span class="string">'pp'</span>).style.display = <span class="string">'none'</span>;      <span class="comment">//使用prototype.js隐藏元素</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、jQuery在其他库之前导入  </p><p>直接使用jQuery而非$来做jQuery的工作，$()方法作为其他库的快捷方式，无需调用jQuery.noConflict()方法</p><h1 id="jQuery选择器"><a href="#jQuery选择器" class="headerlink" title="jQuery选择器"></a>jQuery选择器</h1><h2 id="jQuery选择器的优势"><a href="#jQuery选择器的优势" class="headerlink" title="jQuery选择器的优势"></a>jQuery选择器的优势</h2><p>1、简洁的写法<br>使用<code>$(&quot;#ID&quot;)</code>代替<code>document.getElementById()</code>，使用<code>$(&quot;tagName&quot;)</code>代替<code>document.getElementsByTagName()</code>函数<br>2、支持<code>CSS1</code>到<code>CSS3</code>选择器<br>3、完善的处理机制，即，使用<code>jQuery</code>获取不存在的元素也不会报错 </p><p><strong>注</strong>：<code>$(&quot;#tt&quot;)</code>获取的永远是对象，即使网页上没有元素，因此当要使用jQuery检查某个元素在网页上是否存在，不能使用如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>($(<span class="string">"#tt"</span>))&#123;   <span class="comment">/* do something */</span>   &#125;</span><br><span class="line">应根据获取的元素长度来判断：</span><br><span class="line"><span class="keyword">if</span>($(<span class="string">"#tt"</span>).length &gt; <span class="number">0</span>)&#123;   <span class="comment">/* do something */</span>   &#125;</span><br><span class="line">或转换成DOM对象：</span><br><span class="line"><span class="keyword">if</span>($(<span class="string">"#tt"</span>)[<span class="number">0</span>])&#123;   <span class="comment">/* do something */</span>   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>#id</td><td>根据给定id匹配一个元素</td><td>单个元素</td><td>$(“#test”)选取id为test的元素</td></tr><tr><td>.class</td><td>根据给定类名匹配元素</td><td>集合元素</td><td>$(“.test”)选取所有class为test的元素</td></tr><tr><td>element</td><td>根据给定元素名匹配元素</td><td>集合元素</td><td>$(“p”)</td></tr><tr><td>*</td><td>匹配所有元素</td><td>集合元素</td><td>$(“*”)</td></tr><tr><td>selector1,selector2…</td><td>将每个选择器匹配到的元素合并后一起返回</td><td>集合元素</td><td>$(“div,span,p.myClass”)</td></tr></tbody></table><h2 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>$(“ancestor descendant”)</td><td>选取ancestor元素里所有descendant（后代）元素</td><td>集合元素</td><td>$(“div span”)选取div里所有span元素</td></tr><tr><td>$(“parent&gt;child”)</td><td>与CSS的子选择器一样</td><td>集合元素</td><td>$(“div&gt;span”)</td></tr><tr><td>$(“prev+next”)</td><td>与CSS的相邻同胞选择器一样</td><td>集合元素</td><td>$(“.one+div”)</td></tr><tr><td>$(“prev~sibling”)</td><td>与CSS的通用的同胞组合选择器一样</td><td>集合元素</td><td>$(“#two~div”)</td></tr></tbody></table><p>可以使用<code>next()</code>方法代替<code>$(&#39;prev+next&#39;)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".one+div"</span>);  ==&gt; $(<span class="string">".one"</span>).next(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></p><p>使用<code>nextAll()</code>代替<code>$(&#39;#prev~sibling&quot;)</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#prev~div"</span>); ==&gt; $(<span class="string">"#prev"</span>).nextAll(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure></p><h2 id="基本过滤选择器"><a href="#基本过滤选择器" class="headerlink" title="基本过滤选择器"></a>基本过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:first</td><td>选取第一个元素</td><td>单个元素</td><td>$(“div:first”)选取所有<div>元素中第1个<div>元素</div></div></td></tr><tr><td>:last</td><td>选取最后一个元素</td><td>单个元素</td><td>$(“div:last”)解释类似:first</td></tr><tr><td>:not(selector)</td><td>去除所有与给定选择器匹配的元素</td><td>集合元素</td><td>$(“input:not(.myClass)”)</td></tr><tr><td>:even</td><td>选取索引是偶数的元素，索引从0开始</td><td>集合元素</td><td>$(“input:even”)</td></tr><tr><td>:odd</td><td>选取索引是奇数的元素，索引从0开始</td><td>集合元素</td><td>$(“input:odd”)</td></tr><tr><td>:eq(index)</td><td>选取索引是index的元素，index从0开始</td><td>单个元素</td><td>$(“input:eq(1)”)</td></tr><tr><td>:gt(index)</td><td>选取索引大于index的元素，index从0开始</td><td>集合元素</td><td>$(“input:gt(1)”)</td></tr><tr><td>:lt(index)</td><td>r选取索引小于index的元素，index从0开始</td><td>集合元素</td><td>$(“input:lt(1)”)</td></tr><tr><td>:header</td><td>选取所有标题元素，例h1，h2</td><td>集合元素</td><td>$(“:header”)</td></tr><tr><td>:animated</td><td>选取正在执行动画的元素</td><td>集合元素</td><td>$(“div:animated”)</td></tr><tr><td>:focus</td><td>选取获得焦点的元素</td><td>集合元素</td><td>$(“:focus”)</td></tr></tbody></table><h2 id="内容过滤选择器"><a href="#内容过滤选择器" class="headerlink" title="内容过滤选择器"></a>内容过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:contains(text)</td><td>选取含有文本内容为“text”的元素</td><td>集合元素</td><td>$(“div:contains(‘me’)”)选取所有含有文本”me”的div元素</td></tr><tr><td>:empty</td><td>选取不包含子元素或文本的空元素</td><td>集合元素</td><td>$(“div:empty”)</td></tr><tr><td>:has(selector)</td><td>选取含有选择器所匹配的元素的元素</td><td>集合元素</td><td>$(“div:has(p)”)选取含有p元素的div元素</td></tr><tr><td>:parent</td><td>选取含有子元素或文本元素的元素</td><td>集合元素</td><td>$(“div:parent”)</td></tr></tbody></table><h2 id="可见性过滤选择器"><a href="#可见性过滤选择器" class="headerlink" title="可见性过滤选择器"></a>可见性过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:hidden</td><td>选取所有不可见元素</td><td>集合元素</td><td>$(“:hidden”)选取所有不可见元素</td></tr><tr><td>:visible</td><td>选取所有可见元素</td><td>集合元素</td><td>$(“div:visible”)选取可见的div元素</td></tr></tbody></table><h2 id="属性过滤选择器"><a href="#属性过滤选择器" class="headerlink" title="属性过滤选择器"></a>属性过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>[attribute]</td><td>选择拥有此属性的元素</td><td>集合元素</td><td>$(“div[id]”)选取拥有id属性的div元素</td></tr><tr><td>[attribute=value]</td><td>选择拥有属性值为value的元素</td><td>集合元素</td><td>$(“div[title=test]”)</td></tr><tr><td>[attribute!=value]</td><td>选择属性值不等于value的元素</td><td>集合元素</td><td>$(“div[title!=test]”),没有属性title的元素也会被选取</td></tr><tr><td>[attribute^=value]</td><td>选择属性值以value开始的元素</td><td>集合元素</td><td>$(“div[title^=test]”)</td></tr><tr><td>[attribute$=value]</td><td>选择属性值以value结束的元素</td><td>集合元素</td><td>$(“div[title$=test]”)</td></tr><tr><td>[attribute*=value]</td><td>选择属性值含有value的元素</td><td>集合元素</td><td>$(“div[title*=test]”)</td></tr><tr><td>[attribute丨=value]</td><td>选择属性等于给定字符串或以该字符串为前缀（该字符串后跟一个连字符‘-’）的元素</td><td>集合元素</td><td>$(“div[title丨=”en”]”)选取title属性等于en或以en为前缀的元素</td></tr><tr><td>[attribute~=value]</td><td>选取属性用空格分隔的值中包含一个给定值的元素</td><td>集合元素</td><td>$(“div[title~=”uk”]”)</td></tr><tr><td>[attribute1][attribute2] …</td><td>用属性选择器合并成复合选择器，满足多个条件，缩小范围</td><td>集合元素</td><td>$(“div[id][title$=”test”]”)选取拥有属性id并且属性title以”test”结束的div元素</td></tr></tbody></table><h2 id="子元素过滤选择器"><a href="#子元素过滤选择器" class="headerlink" title="子元素过滤选择器"></a>子元素过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:nth-child<code>(index/even/odd/equatioin)</code></td><td>选取每个父元素下第index个子元素或奇偶元素，index从1开始</td><td>集合元素</td><td>将为每一个父元素匹配子元素</td></tr><tr><td>:first-child</td><td>选取每个父元素的第一个子元素</td><td>集合元素</td><td>将为每一个父元素匹配子元素</td></tr><tr><td>:last-child</td><td>选取每个父元素的最后一个子元素</td><td>集合元素</td><td>将为每一个父元素匹配子元素</td></tr><tr><td>:only-child</td><td>若某个元素是其父元素唯一的子元素，则被匹配</td><td>集合元素</td><td>$(“ul li:only-child”)在<code>&lt;ul&gt;</code>中选取是唯一子元素的<code>&lt;li&gt;</code>元素</td></tr></tbody></table><p><code>:nth-child()</code>选择器功能如下：<br>1、<code>:nth-child(even)</code>选择索引是偶数的元素<br>2、<code>:nth-child(2)</code>选择索引是2的元素<br>3、<code>:nth-child(3n+1)</code>选择索引是<code>（3n+1）</code>的元素，<code>n</code>从1开始  </p><h2 id="表单过滤选择器"><a href="#表单过滤选择器" class="headerlink" title="表单过滤选择器"></a>表单过滤选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:enabled</td><td>选取所有可用元素</td><td>集合元素</td><td>$(“#form1 :enabled”)</td></tr><tr><td>:disabled</td><td>选取所有不可用元素</td><td>集合元素</td><td>$(“#form1 :disabled”)</td></tr><tr><td>:checked</td><td>选取所有被选中元素，单选，复选</td><td>集合元素</td><td>$(“input:checked”)</td></tr><tr><td>:selected</td><td>选取所有被选中选项元素，下来列表</td><td>集合元素</td><td>$(“select option:selected”)</td></tr></tbody></table><h2 id="表单选择器"><a href="#表单选择器" class="headerlink" title="表单选择器"></a>表单选择器</h2><table><thead><tr><th>选择器</th><th>描述</th><th>返回</th><th>示例</th></tr></thead><tbody><tr><td>:input</td><td>选取所有<code>&lt;input&gt;&lt;textarea&gt;&lt;select&gt;&lt;button&gt;</code></td><td>集合元素</td><td>$(“:input”)</td></tr><tr><td>:text</td><td>选取所有单行文本框</td><td>集合元素</td><td>$(“:text”)</td></tr><tr><td>:password</td><td>选取所有密码框</td><td>集合元素</td><td>$(“:password”)</td></tr><tr><td>:radio</td><td>选取所有单选框</td><td>集合元素</td><td>$(“:radio”)</td></tr><tr><td>:checkbox</td><td>选取所有复选框</td><td>集合元素</td><td>$(“:checkbox”)</td></tr><tr><td>:submit</td><td>选取所有提交按钮</td><td>集合元素</td><td>$(“:submit”)</td></tr><tr><td>:image</td><td>选取所有图像按钮</td><td>集合元素</td><td>$(“:image”)</td></tr><tr><td>:reset</td><td>选取重置按钮</td><td>集合元素</td><td>$(“:reset”)</td></tr><tr><td>:button</td><td>选取所有按钮</td><td>集合元素</td><td>$(“:button”)</td></tr><tr><td>:file</td><td>选取所有上传域</td><td>集合元素</td><td>$(“:file”)</td></tr><tr><td>:hidden</td><td>选取所有不可见元素</td><td>集合元素</td><td>$(“:hidden”)</td></tr></tbody></table><p><strong>选择器中的注意事项</strong><br>1、选择器中含有<code>&quot;.&quot;</code>，<code>&quot;#&quot;</code>，<code>&quot;(&quot;，&quot;]&quot;</code>等特殊符号，需要转义，例：<code>$(&quot;#id\\#b&quot;)</code><br>2、属性选择器中的<code>@</code>符号需要去掉   </p><h1 id="jQuery中的DOM操作"><a href="#jQuery中的DOM操作" class="headerlink" title="jQuery中的DOM操作"></a>jQuery中的DOM操作</h1><h2 id="HTML-DOM操作"><a href="#HTML-DOM操作" class="headerlink" title="HTML-DOM操作"></a>HTML-DOM操作</h2><h3 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h3><p>（1）查找元素节点，使用选择器。<br>  获取元素节点并打印出它的文本内容：如下    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $li = $(<span class="string">"ul li:eq(1)"</span>);  <span class="comment">//获取&lt;ul&gt;里第2个&lt;li&gt;节点   </span></span><br><span class="line"><span class="keyword">var</span> li_txt = $li.text();     <span class="comment">//获取第2个&lt;li&gt;元素节点的文本内容</span></span><br><span class="line"><span class="built_in">console</span>.log(li_txt);         <span class="comment">//打印文本内容</span></span><br></pre></td></tr></table></figure><p>（2）查找属性节点，再找到元素之后，可以使用attr()方法获取元素属性<br>   获取属性节点并打印出它的文本内容：如下       </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $para = $(<span class="string">"p"</span>);     <span class="comment">//获取&lt;p&gt;节点</span></span><br><span class="line"><span class="keyword">var</span> p_txt = $para.attr(<span class="string">"title"</span>);  <span class="comment">//获取&lt;p&gt;元素节点属性title</span></span><br><span class="line"><span class="built_in">console</span>.log(p_txt);</span><br></pre></td></tr></table></figure><h3 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h3><p>（1）创建元素节点<br>使用工厂函数<code>$()</code>来完成，<code>$(html)</code>，根据传入的HTML标记字符串，创建一个<code>DOM</code>对象，并转成<code>jQuery</code>对象返回<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">例：$(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>)</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">（2）创建文本节点，与（1）类似，将文本内容一起包含在`</span>HTML<span class="string">`标记字符串中    </span></span><br><span class="line"><span class="string">（3）创建属性节点，与（1）类似，将节点属性一起包含在`</span>HTML<span class="string">`标记字符串中    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 插入节点</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">方法 | 描述 | 示例</span></span><br><span class="line"><span class="string">---|--- |---</span></span><br><span class="line"><span class="string">append()| 向每个匹配的元素内部追加内容 |&lt;p&gt;我想说：&lt;/p&gt; $("p").append("&lt;b&gt;你好&lt;/b&gt;"); &lt;p&gt;我想说：&lt;b&gt;你好&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">appendTo()|将所有匹配元素追加到指定元素中 ，与append方法颠倒$(A).append的操作，既不是将B追加到A中，而是将A追加到B中 |&lt;p&gt;我想说：&lt;/p&gt; $("&lt;b&gt;你好&lt;/b&gt;").appendTo("p"); &lt;p&gt;我想说：&lt;b&gt;你好&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">prepend()|向每个元素内部前置内容 | &lt;p&gt;我想说：&lt;/p&gt;$("p").prepend("&lt;b&gt;你好&lt;/b&gt;");&lt;p&gt;&lt;b&gt;你好&lt;/b&gt;我想说：&lt;/p&gt;</span></span><br><span class="line"><span class="string">prependTo()| 将所有匹配元素前置到指定元素中，与prependTo方法颠倒 | &lt;p&gt;我想说：&lt;/p&gt;$("p").prependTo("&lt;b&gt;你好&lt;/b&gt;");&lt;p&gt;&lt;b&gt;你好&lt;/b&gt;我想说：&lt;/p&gt;</span></span><br><span class="line"><span class="string">after() | 在每个匹配元素之后插入内容 | &lt;p&gt;我想说：&lt;/p&gt;$("p").after("&lt;b&gt;你好&lt;/b&gt;");&lt;p&gt;我想说：&lt;/p&gt;&lt;b&gt;你好&lt;/b&gt;</span></span><br><span class="line"><span class="string">insertAfter() | 将所有匹配元素插入到指定元素之后 | &lt;p&gt;我想说：&lt;/p&gt;$("&lt;b&gt;你好&lt;/b&gt;  ").insertAfter("p");&lt;p&gt;我想说：&lt;/p&gt;&lt;b&gt;你好&lt;/b&gt;</span></span><br><span class="line"><span class="string">before() | 在每个匹配的元素之前插入内容 | &lt;p&gt;我想说：&lt;/p&gt;$("p").before("&lt;b&gt;你好&lt;/b&gt;");&lt;b&gt;你好&lt;/b&gt; &lt;p&gt;我想说：&lt;/p&gt;</span></span><br><span class="line"><span class="string">insertBefore() | 将所有匹配元素插入到指定元素之前 | &lt;p&gt;我想说：&lt;/p&gt;$("&lt;b&gt;你好&lt;/b&gt;  ").insertBefore("p");&lt;b&gt;你好&lt;/b&gt; &lt;p&gt;我想说：&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">这些节点的方法不仅能将新创建的DOM元素插入到文档中，也能对原来的DOM元素进行移动。    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 删除节点</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">（1）remove方法    </span></span><br><span class="line"><span class="string">作用从 `</span>DOM<span class="string">` 中删除所有匹配的元素，传入的参数用于根据 `</span>jQuery<span class="string">` 表达式来删选元素     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="string">"ul li:eq(1)"</span>).remove();  <span class="comment">// 获取第二个 &lt;li&gt; 元素节点后，将它从网页中删除</span></span><br><span class="line">$li.appendTo(<span class="string">"ul"</span>);         <span class="comment">// 把刚才删除的元素添加到 &lt;ul&gt; 元素中</span></span><br></pre></td></tr></table></figure></p><p>这个方法的返回值是一个指向已被删除的节点的引用，因此可以将其保存在一个变量中，以后还可以使用。      </p><p>（2）datach方法    </p><p><code>detach()</code> 和 <code>remove()</code> 一样，也是从 <code>DOM</code> 中去掉所有匹配的元素，但是两者的区别是，这个方法不会把匹配的元素从 <code>jQuery</code> 对象中删除，去掉的元素的所有绑定的事件、附加的数据等都会保留下来。     </p><p>（3）empty方法     </p><p>并不能算是删除节点，而是清空节点，清空指定元素的所有后代节点。   </p><h3 id="复制节点"><a href="#复制节点" class="headerlink" title="复制节点"></a>复制节点</h3><p>使用<code>clone</code>方法，使用参数<code>true</code>可以同时复制元素所绑定事件     </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"ul li"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).clone().appendTo(<span class="string">"ul"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">复制的节点后，被复制的新元素并不具有任何行为，如果需要新元素也具有相同的行为，那么就需要在 `</span>clone()<span class="string">` 方法中传入参数 `</span><span class="literal">true</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="string">"ul li"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).clone(<span class="literal">true</span>).appendTo(<span class="string">"ul"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 替换节点  </span></span><br><span class="line"><span class="string">`</span>replaceWith();<span class="string">`-&gt;将所有匹配的元素都替换成 `</span>HTML<span class="string">` 或者 `</span>DOM<span class="string">` 元素，绑定的事件将会消失    </span></span><br><span class="line"><span class="string">`</span>replaceAll();<span class="string">`-&gt;和 `</span>replaceWith()<span class="string">` 相反    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="string">"p"</span>).replaceWith(<span class="string">"&lt;strong&gt;hello world&lt;/strong&gt;"</span>);</span><br><span class="line">$(<span class="string">"&lt;strong&gt;hello world&lt;/strong&gt;"</span>).replaceAll(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure><p>以上两句是一样的效果。<br>注意：替换前元素有绑定事件，替换后会被清除，需要重新再新元素上重新绑定事件。     </p><h3 id="包裹节点"><a href="#包裹节点" class="headerlink" title="包裹节点"></a>包裹节点</h3><p>使用<code>wrap()</code>方法; -&gt;将所有的元素单独包裹。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;hello world&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">$("strong").wrap("&lt;b&gt;&lt;/</span>b&gt;<span class="string">");     //用b标签把strong元素包裹起来</span></span><br><span class="line"><span class="string">&lt;b&gt;&lt;strong&gt;hello world&lt;/strong&gt;&lt;/b&gt;</span></span><br></pre></td></tr></table></figure><p>wrapAll()和wrapInner()；<br>（1）<code>wrapAll</code>。<br>将所有匹配元素用一个元素来包裹，与<code>wrap</code>不同，<code>wrap</code>是将所有匹配元素单独包裹：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;strong&gt;hello world&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">&lt;strong&gt;hello world&lt;/</span>strong&gt;</span><br><span class="line">$(<span class="string">"strong"</span>).wrap(<span class="string">"&lt;b&gt;&lt;/b&gt;"</span>);</span><br><span class="line">&lt;b&gt;&lt;strong&gt;hello world&lt;/strong&gt;&lt;/b&gt;</span><br><span class="line">&lt;b&gt;&lt;strong&gt;hello world&lt;/strong&gt;&lt;/b&gt;</span><br></pre></td></tr></table></figure><p>而使用wrapAll之后：   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;</span><br><span class="line">&lt;strong&gt;hello world&lt;<span class="regexp">/strong&gt;</span></span><br><span class="line"><span class="regexp">&lt;strong&gt;hello world&lt;/</span>strong&gt;</span><br><span class="line">&lt;<span class="regexp">/b&gt;</span></span><br><span class="line"><span class="regexp">```  </span></span><br><span class="line"><span class="regexp">注意：若被包裹元素之间有其他元素，则其他元素会被放到包裹元素之后      </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">（2）wrapInner方法    </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">该方法将每一个匹配的元素的子内容用其他结构化标记包裹起来：    </span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">```javascript</span></span><br><span class="line"><span class="regexp">&lt;strong&gt;hello world&lt;/</span>strong&gt;</span><br><span class="line">$(<span class="string">"strong"</span>).wrapInner(<span class="string">"&lt;b&gt;&lt;/b&gt;"</span>);</span><br><span class="line">&lt;strong&gt;&lt;b&gt;hello world&lt;/b&gt;&lt;/strong&gt;</span><br></pre></td></tr></table></figure><h3 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h3><p>（1）获取和设置属性    </p><p>使用<code>attr()</code>方法     </p><p>获取属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $p = $(<span class="string">"p"</span>); <span class="comment">//获取&lt;p&gt;节点</span></span><br><span class="line"><span class="keyword">var</span> p_txt = $p.attr(<span class="string">"title"</span>);<span class="comment">//获取&lt;p&gt;元素节点属性title</span></span><br></pre></td></tr></table></figure></p><p>设置属性    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).attr(<span class="string">"title"</span>,<span class="string">"value"</span>);     <span class="comment">//用于设置单个属性</span></span><br><span class="line">$(<span class="string">"p"</span>).attr(&#123;<span class="string">"title"</span>:<span class="string">"you title"</span>,<span class="string">"name"</span>:<span class="string">"you name"</span>&#125;);     <span class="comment">//用于设置多个属性，使用对象传递</span></span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">注：类似这样的属性还有`</span>html()<span class="string">`、`</span>css()<span class="string">`、`</span>text()<span class="string">`、`</span>height()<span class="string">`、`</span>widht()<span class="string">`、`</span>val()<span class="string">`等方法。    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（2）删除属性    </span></span><br><span class="line"><span class="string">使用`</span>removeAttr()<span class="string">`方法   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="string">"p"</span>).removeAttr(<span class="string">"title"</span>);<span class="comment">//删除&lt;p&gt;元素的属性title</span></span><br></pre></td></tr></table></figure><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><p>（1）获取样式和设置样式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>attr()</code>方法<br>（2）追加样式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用<code>addClass()</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).addClass(<span class="string">"another"</span>);<span class="comment">//给&lt;p&gt;元素追加"another"类。</span></span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**注：**   </span></span><br><span class="line"><span class="string">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(1)如果给一个元素添加了多个`</span><span class="class"><span class="keyword">class</span>`值，那么就相当于合并了它们的样式。   </span></span><br><span class="line"><span class="class">&amp;<span class="title">nbsp</span></span>;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;(<span class="number">2</span>)如果有不同的<span class="string">`class`</span>设定了同一样式属性，则后者覆盖前者。  </span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）移除样式   </span><br><span class="line">&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;使用<span class="string">`removeClass()`</span>,参数为要移除的<span class="string">`class`</span>名，不带参数则把所有<span class="string">`class`</span>移除    </span><br><span class="line">（<span class="number">4</span>）切换样式   </span><br><span class="line"><span class="string">`toggle()`</span>方法。   </span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">$toggleBtn.toggle(function()&#123;</span></span><br><span class="line"><span class="string">     // 显示元素        代码1</span></span><br><span class="line"><span class="string">&#125;,function()&#123;</span></span><br><span class="line"><span class="string">     //隐藏元素         代码2</span></span><br><span class="line"><span class="string">&#125;);</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">`</span>toggle<span class="string">`的作用是，交替执行代码1和代码2，主要是用于控制行为上的重复切换    </span></span><br><span class="line"><span class="string">`</span>toggleClass()<span class="string">`方法  </span></span><br><span class="line"><span class="string">用于控制样式上的切换，类名存在则删除，不存在则添加</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="string">"p"</span>).toggleClass(<span class="string">"another"</span>);</span><br></pre></td></tr></table></figure><p>（5）判断是否含有某个样式<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>hasClass()</code>方法用于判断是否含有某个<code>class</code>，有返回<code>true</code>，没有返回<code>false</code>   </p><h3 id="设置和获取HTML、文本和值"><a href="#设置和获取HTML、文本和值" class="headerlink" title="设置和获取HTML、文本和值"></a>设置和获取HTML、文本和值</h3><p>（1）类似于<code>JavaScript</code>的<code>innerHTML</code>属性，可以用于获取和设置元素（传递参数）的<code>HTML</code>内容。<br>注:可用于<code>XHTML</code>，不可用于<code>XML</code>。<br>（2）<code>text()</code>方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类似于<code>JavaScript</code>的<code>innerText</code>属性，用于获取和设置元素（传递参数）的文本内容。<br>（3）<code>val()</code>方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;类似于<code>JavaScript</code>的<code>value</code>属性，用于设置和获取元素的值，无论元素是文本框，下来列表还是单选框，都可以返回元素值，若为多选，返回一个包含所有选择的值的数组。   </p><h3 id="遍历节点"><a href="#遍历节点" class="headerlink" title="遍历节点"></a>遍历节点</h3><p>（1）<code>children()</code>方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;取得匹配元素的子元素集合，只考虑子元素，不考虑后代元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).children();</span><br></pre></td></tr></table></figure></p><p>（2）<code>next()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于取得匹配元素后面紧邻的同辈元素。<br>（3）<code>prev()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于取得匹配元素前面紧邻的同辈元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).prev();<span class="comment">//取得紧邻&lt;p&gt;元素前的同辈元素</span></span><br></pre></td></tr></table></figure></p><p>（4）<code>siblings()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于取得匹配元素前后所有同辈元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).siblings();<span class="comment">//取得&lt;p&gt;元素的同辈元素</span></span><br></pre></td></tr></table></figure></p><p>（5）<code>closest()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该方法用于取得最近的匹配元素。首先检查元素本身，接着逐级向上往祖先元素查找，没找到则返回空<code>jQuery</code>对象</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如，给点击的目标元素的最近的<code>li</code>元素添加颜色。如下：    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">$(e.target).closest(<span class="string">"li"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>（6）<code>parent()</code>，<code>parents()</code>，<code>closest()</code>区别<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>parent()</code>，获取集合中每个匹配元素的父元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>parents()</code>，获取集合中每个匹配元素的祖先元素<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>closese()</code>，从元素本身开始，逐级向上级元素匹配，并返回最先匹配的祖先元素      </p><h2 id="CSS-DOM操作"><a href="#CSS-DOM操作" class="headerlink" title="CSS-DOM操作"></a>CSS-DOM操作</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以直接利用<code>css()</code>方法获取元素的样式属性：<code>$(&quot;p&quot;).css(&quot;color&quot;)</code>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论是外部<code>CSS</code>导入，还是直接拼接在HTML元素中，都可以通过<code>css()</code>方法获得<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置样式与<code>attr()</code>方法类似      </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>);     <span class="comment">//设置单个</span></span><br><span class="line">$(<span class="string">"p"</span>).css(&#123;<span class="string">"color"</span>:<span class="string">"red"</span>,<span class="string">"fontSize"</span>:<span class="string">"30px"</span>);     <span class="comment">//设置多个</span></span><br></pre></td></tr></table></figure><p>注：如果值是数字，则自动转化为像素值获取元素高度，可以直接使用<code>height</code>属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).height();</span><br></pre></td></tr></table></figure></p><p>注：<br>1、<code>jQuery1.2</code>之后<code>height</code>可用于获取<code>window</code>和<code>document</code>的高度<br>2、<code>css</code>方法获取的高度值与样式设置有关，而<code>height</code>获取的是元素在页面实际高度，与样式置无关，且不带单位与<code>height</code>对应的还有<code>width()</code>方法。               </p><p>其他几个经常使用的方法：   </p><p>（1）<code>offset()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于获取元素在当前视窗的相对偏移，返回对象包含两个属性，<code>top</code>，<code>left</code>，只对可见元素有效。<br>（2）<code>position()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用于获取元素相对于最近一个<code>position</code>样式属性设置为<code>elative</code>或<code>absolute</code>的祖先节点的相对偏移，返回对象也包含连个属性<code>top</code>，<code>left</code>。<br>（3）<code>scrollTop()</code>方法和<code>scrollLeft()</code>方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分别用于获取元素的滚动条距顶端和距左侧的距离，还可以接受一个参数，指定滚动条滚动到指定位置。</p><h1 id="jQuery中的事件和动画"><a href="#jQuery中的事件和动画" class="headerlink" title="jQuery中的事件和动画"></a>jQuery中的事件和动画</h1><h2 id="jQuery中的事件"><a href="#jQuery中的事件" class="headerlink" title="jQuery中的事件"></a>jQuery中的事件</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>JavaScript</code>中通常使用<code>window.onload</code>方法，<code>jQuery</code>中使用<code>$(document).ready()</code>方法。   </p><h3 id="1、执行时机"><a href="#1、执行时机" class="headerlink" title="1、执行时机"></a>1、执行时机</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>window.onload</code>方法在网页所有元素都加载完毕之后才执行，<code>$(document).ready()</code>方法在<code>DOM</code>完全就绪就可以被调用    </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于<code>$(document).ready()</code>方法内注册事件，只要DOM就绪就会被执行，因此有可能此时元素的关联文件还未下载完，例如图片的宽高可能无效。为解决此问题，使用<code>jQuery</code>另一个方法—–<code>load()</code>方法。<code>load()</code>方法会在元素的<code>onload</code>事件绑定一个处理函数。    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).load(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//编写代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>等价于<code>javascript</code>中的以下代码：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//编写代码</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="多次使用"><a href="#多次使用" class="headerlink" title="多次使用"></a>多次使用</h3><p><code>windows.onload()</code>方法不能保存多个函数引用，而<code>$(document).ready()</code>可以      </p><h3 id="简写形式"><a href="#简写形式" class="headerlink" title="简写形式"></a>简写形式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//编写代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>简写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//编写代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><code>$(document)</code>也可以简写为<code>$()</code>，当<code>$()</code>不带参数时，默认参数就是<code>document</code>，因此还可以简写：   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$().ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// coding</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h3><p>使用<code>bind()</code>方法来对匹配元素进行特定事件绑定，调用格式：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bind(type [,datd] ,fn);</span><br></pre></td></tr></table></figure></p><p>1.第一个参数是事件类型，类型包括：<code>blur</code> <code>focus</code> <code>load</code> <code>resize</code> <code>scroll</code> <code>unload</code> <code>cliock</code> <code>dblclick</code> <code>mousedownmouseup</code> <code>mouseover</code> <code>mouseout</code> <code>mouseenter</code> <code>mouseleave</code> <code>change</code> <code>select</code> <code>submit</code> <code>keyup</code> <code>keydown</code> <code>keypress</code> <code>keyuperror</code><br>2.第二个参数是可选参数，作为<code>event.data</code>属性值传递给事件对象的额外数据对象<br>3.第三个参数则是用来绑定的处理函数<br>使用：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#panel h5.head"</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">// coding</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="合成事件"><a href="#合成事件" class="headerlink" title="合成事件"></a>合成事件</h3><p><code>jQuery</code>有两个合成事件—<code>hover()</code>、<code>toggle()</code>，类似<code>ready()</code>，<code>hover()</code>和<code>toggle()</code>都是<code>jQuery</code>自定义方法<br>1、<code>hover()</code>方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hover(enter,leave)</span><br></pre></td></tr></table></figure></p><p><code>hover(fn1,fn2,...fnN)</code>方法用于模拟光标悬停事件，当光标移动到元素上时，会触发第一个函数<code>（enter）</code>，当光标移出这个元素时会触发第二个函数<code>（leave）</code><br>2、<code>toggle()</code>方法  —在<code>jQuery1.9</code>被移除<br><code>toggle()</code> 方法用于模拟鼠标的连续点击事件，第一次单击元素，触发第一个函数，第二次单击同一个元素，会触发第二个函数，如果有更多的函数，则依次触发，直到最后一个。     </p><h4 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h4><p><strong>停止事件冒泡</strong><br><code>使用event.stopPropagation()</code>可以停止事件冒泡   </p><p>假设网页上有两个元素，其中一个嵌套在另一个元素里面，并且都被绑定了 <code>click</code>事件。同时 <code>&lt;body&gt;</code>元素上也绑定了<code>click</code> 事件，这样的话，点击最内层的元素，会触发三次 <code>click</code>事件。这是因为 <code>JavaScript</code>的事件冒泡机制。<br>在 <code>jQuery</code>中，提供了 <code>stopPropagation()</code> 方法来停止冒泡。     </p><p><strong>阻止默认行为</strong><br>网页中的元素有自己的默认行为，例如点击超链接会跳转、单击提交按钮，表单会提交，有时需阻止事件默认行为<br><code>jQuery</code>中提供了<code>preventDefault()</code>方法来阻止默认行为<code>event.preventDefault()</code></p><p>注：若想对事件对象停止冒泡和默认行为，可以在事件处理函数中返回<code>false</code>，这是对在事件对象上同时调用<code>stopPropagation</code>和<code>preventDefault</code>的一种简写方式   </p><h3 id="事件对象的属性"><a href="#事件对象的属性" class="headerlink" title="事件对象的属性"></a>事件对象的属性</h3><table><thead><tr><th>方法名称</th><th>描述</th></tr></thead><tbody><tr><td>event.type</td><td>获取到事件的类型</td></tr><tr><td>event.preventDefault()</td><td>阻止默认的事件行为</td></tr><tr><td>stopPropagation()</td><td>阻止事件冒泡</td></tr><tr><td>event.tagent()</td><td>获取到触发事件的元素</td></tr><tr><td>event.relatedTarget()</td><td>mousover 和 mouseout 所发生的元素</td></tr><tr><td>event.pageX event.pageY</td><td>获取到光标相对于页面的 x 坐标和 y 坐标</td></tr><tr><td>event.which()</td><td>鼠标单击事件中获取到的左、中、右键，在键盘事件中获取键盘的按键</td></tr><tr><td>event.metaKey()</td><td>为键盘事件获取<code>ctrl</code>键   </td></tr></tbody></table><h3 id="移除事件"><a href="#移除事件" class="headerlink" title="移除事件"></a>移除事件</h3><p>1、移除按钮元素上以前注册的事件使用<code>unbind()</code>方法，语法结构：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unbind([type],[data]);</span><br></pre></td></tr></table></figure></p><p>第一个参数是事件类型，第二个参数是要移除的函数<br>&nbsp;&nbsp;&nbsp;&nbsp;（1）若没有参数，删除所有绑定事件<br>&nbsp;&nbsp;&nbsp;&nbsp;（2）若提供了事件类型作为参数，则只删除该类型的绑定事件<br>&nbsp;&nbsp;&nbsp;&nbsp;（3）若都传递，则只有这个特定的事件处理函数会被删除      </p><h3 id="one-方法"><a href="#one-方法" class="headerlink" title="one() 方法"></a>one() 方法</h3><p>对于只要触发一次，随后要立即解除绑定的情况，<code>jQuery</code>提供了 <code>one()</code> 方法。<br>当处理函数触发一次后，立即被删除。    </p><h3 id="模拟操作"><a href="#模拟操作" class="headerlink" title="模拟操作"></a>模拟操作</h3><p>1、常用模拟<br>使用<code>trigger()</code>方法完成模拟操作：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn"</span>).trigger(<span class="string">"click"</span>);     <span class="comment">// 触发id为btn的click事件</span></span><br><span class="line"><span class="comment">// 也可以简化：</span></span><br><span class="line">$(<span class="string">"#btn"</span>).click();</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">2、触发自定义事件   </span></span><br><span class="line"><span class="string">`</span>trigger()<span class="string">`方法不仅可触发浏览器支持的具有相同名称的事件，也可以触发自定义名称的事件   </span></span><br><span class="line"><span class="string">例：   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">"myClick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'#test'</span>).append(<span class="string">"&lt;p&gt;我的自定义事件&lt;/p&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">"myClick"</span>);</span><br></pre></td></tr></table></figure></p><p>3、传递数据    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).bind(<span class="string">"myClick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event,message1,message2</span>)</span>&#123;</span><br><span class="line">  $(<span class="string">'#test'</span>).append(<span class="string">"&lt;p&gt;"</span>+message1+message2+<span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#btn'</span>).trigger(<span class="string">"myClick"</span>,[<span class="string">"我的自定义"</span>,<span class="string">"事件"</span>]);</span><br></pre></td></tr></table></figure><p>4、执行默认操作   </p><p><code>trigger()</code>方法触发事件后，还会执行浏览器默认操作   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).trigger(<span class="string">"focus"</span>);</span><br></pre></td></tr></table></figure><p>不仅会触发绑定在<code>input</code>上的事件，也会使<code>input</code>元素获得焦点<br>使用<code>triggerHandler()</code>方法可以只触发事件，而不执行浏览器默认操作   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'input'</span>).triggerHandler(<span class="string">"focus"</span>);</span><br></pre></td></tr></table></figure><p>只会触发绑定事件，不会是<code>input</code>元素获得焦点   </p><h3 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h3><p>1、绑定多个事件类型<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     $(<span class="string">"div"</span>).bind(<span class="string">"mouseout mouseover"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="comment">//do something </span></span><br><span class="line">     &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>2、添加事件命名空间，便于管理<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'div'</span>).bind(<span class="string">"click.plugin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'body'</span>).append(<span class="string">"&lt;p&gt;click事件&lt;/p&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'div'</span>).bind(<span class="string">"mouseover.plugin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'body'</span>).append(<span class="string">"&lt;p&gt;mouseover事件&lt;/p&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'div'</span>).bind(<span class="string">"dbclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'body'</span>).append(<span class="string">"&lt;p&gt;dbclick事件&lt;/p&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'div'</span>).unbind(<span class="string">".plugin"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">在所绑定的事件后面添加命名空间，删除时只需要指定命名空间即可，单击`</span>&lt;button&gt;<span class="string">`后，plugin的命名空间被删除，而不再`</span>plugin<span class="string">`空间中的`</span>dbclick<span class="string">`事件依然存在    </span></span><br><span class="line"><span class="string">3、相同事件名称，不同命名空间执行方法    </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">'div'</span>).bind(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'body'</span>).append(<span class="string">"&lt;p&gt;click事件&lt;/p&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'div'</span>).bind(<span class="string">"click.plugin"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'body'</span>).append(<span class="string">"&lt;p&gt;click.plugin事件&lt;/p&gt;"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">'button'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="string">'div'</span>).trigger(<span class="string">"click!"</span>); <span class="comment">//注意感叹号</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>单击<code>&lt;div&gt;</code>元素后，会同时触发<code>click</code>事件和<code>click.plugin</code>事件，若只单击<button>则只触发<code>click</code>事件，不触发<code>click.plugin</code>事件，注意<code>trigger(&quot;click!&quot;)</code>后面的感叹号的作用是匹配所有不包含命名空间中的<code>click</code>方法<br>若两者都要触发，改为如下代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).trigger(<span class="string">"click"</span>);</span><br></pre></td></tr></table></figure></button></p><h3 id="jQuery中的动画"><a href="#jQuery中的动画" class="headerlink" title="jQuery中的动画"></a>jQuery中的动画</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>hide() show()</td><td>同时修改多个样式属性，即高度、宽度和不透明度</td></tr><tr><td>fadeIn() fadeOut()</td><td>只改变不透明度</td></tr><tr><td>slideUp() slideDown()</td><td>只改变高度</td></tr><tr><td>toggle()</td><td>用来代替 hide() 和 show() 方法</td></tr><tr><td>slideToggle()</td><td>用来代替 slideUp() 和 slideDown()</td></tr><tr><td>fadeToggle()</td><td>用来代替 fadeIn() 和 fadeOut()</td></tr><tr><td>animate()</td><td>属于自定义动画的方法</td></tr></tbody></table><p><strong>1、show()方法和hide()方法</strong></p><p>（1）<code>show()</code>方法和<code>hide()</code>方法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;调用<code>hide()</code>方法会将该元素的<code>display</code>样式改为<code>“none”</code><br>元素隐藏后可以使用<code>show()</code>方法将元素的<code>display</code>样式设置为先前的显示状态<br>（2）<code>show()</code>方法和<code>hide()</code>方法让元素动起来<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;希望调用<code>show()</code>方法时元素慢慢地显示出来，可以为<code>show()</code>方法指定一个速度参数，例如，速度关键字<code>“slow”</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(“element”).show(<span class="string">"slow"</span>);</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">元素会在`</span><span class="number">600</span>ms<span class="string">`内慢慢显示，还有`</span>normal（<span class="number">400</span>ms）<span class="string">`，`</span>fast（<span class="number">200</span>ms）<span class="string">`，还可以指定一个数字（单位是毫秒）   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panel h5.head"</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().show(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().hide(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>2、fadeIn()方法和fadeOut()方法</strong>   </p><p><code>fadeIn()</code>,<code>fadeOut()</code>只改变元素的不透明度，<code>fadeOut()</code>会在指定的时间内降低元素的不透明度，直至元素完全消失<code>（display:none）</code>，<code>fadeIn()</code>相反。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panel h5.head"</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().fadeOut();</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().fadeIn();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>也可以使用关键字和指定时间参数，单位毫秒  </p><p><strong>3、slideUp()方法和slideDown()方法</strong>    </p><p>这两个方法只会改变元素的高度，若一个元素的<code>display</code>为<code>none</code>，<code>slideDown()</code>会将这个元素自上而下延伸显示，<code>slideUp()</code>正好相反    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panel h5.head"</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().slideDown();</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().slideUp();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">一样可以使用关键字和指定时间参数，单位毫秒   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 自定义动画方法animate()</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"> animate(params, speed, callback);</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（1）`</span>params<span class="string">`：一个包含样式属性及值的映射，例：`</span>&#123;<span class="attr">property</span>:<span class="string">"value"</span>,<span class="attr">property</span>:<span class="string">"value1"</span>,....&#125; <span class="string">`   </span></span><br><span class="line"><span class="string">（2）`</span>speed<span class="string">`：速度参数，可选   </span></span><br><span class="line"><span class="string">（3）`</span>callback<span class="string">`：动画完成时执行的函数，可选    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">1、自定义简单动画    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">#panels&#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    width: <span class="number">100</span>px;</span><br><span class="line">    height: <span class="number">100</span>px;</span><br><span class="line">    border: 1px solid #0050d0;</span><br><span class="line">    background: #96e555;</span><br><span class="line">    cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div id=<span class="string">"panels"</span>&gt;&lt;/div&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"500px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;三秒之内，<code>div</code>右移<code>500px</code>，只会移动一次   </p><p>2、累加、累减动画   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"+=500px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3、多重动画<br>（1）同时执行多个动画<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"500px"</span>,<span class="attr">width</span>:<span class="string">"200px"</span>,<span class="attr">height</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这是同时执行的动画   </p><p> （2）按顺序执行多个动画<br> 把多个动画拆开即可<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"500px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">width</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">height</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>链式写法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"500px"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .animate(&#123;<span class="attr">width</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .animate(&#123;<span class="attr">height</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>4、综合动画<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).css(<span class="string">"opacity"</span>,<span class="string">"0.5"</span>);<span class="comment">//设置不透明度</span></span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"400px"</span>,<span class="attr">height</span>:<span class="string">"200px"</span>,<span class="attr">opacity</span>:<span class="string">"1"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .animate(&#123;<span class="attr">top</span>:<span class="string">"200px"</span>,<span class="attr">width</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .fadeOut(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>5、动画回调函数<br>若想在最后完成时改变<code>CSS</code>样式，而不是淡出，则需要使用回调函数，而不是将<code>css()</code>方法写在<code>fadeOut()</code>方法的位置，因为<code>css()</code>方法并不会加入动画队列   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).css(<span class="string">"opacity"</span>,<span class="string">"0.5"</span>);<span class="comment">//设置不透明度</span></span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"400px"</span>,<span class="attr">height</span>:<span class="string">"200px"</span>,<span class="attr">opacity</span>:<span class="string">"1"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .animate(&#123;<span class="attr">top</span>:<span class="string">"200px"</span>,<span class="attr">width</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    $(<span class="keyword">this</span>).css(<span class="string">"border"</span>,<span class="string">"5px solid blue"</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注：callback回调函数适合<code>jQuery</code>的所有动画效果</strong>   </p><h3 id="停止动画和判断是否处于动画状态"><a href="#停止动画和判断是否处于动画状态" class="headerlink" title="停止动画和判断是否处于动画状态"></a>停止动画和判断是否处于动画状态</h3><p>1、停止元素的动画<br>使用<code>stop()</code>方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop([clearQueue],[gotoEnd]);</span><br></pre></td></tr></table></figure></p><p>参数均为可选参数，为<code>boolean</code>值<br><code>clearQueue</code>表示是否清空动画队列，<code>gotoEnd</code>表示直接将正在执行的动画跳转到末状态<br>如果直接使用<code>stop()</code>方法，则会立即停止正在执行的动画，若还有动画等待执行，则以当前状态继续执行下一个动画     </p><p>2、判断元素是否处在动画状态<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!$(<span class="string">"element"</span>).is(<span class="string">":animate"</span>))&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string">3、延迟动画   </span></span><br><span class="line"><span class="string">使用`</span>delay()<span class="string">`方法可以对动画进行延迟操作    </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panels"</span>).css(<span class="string">"opacity"</span>,<span class="string">"0.5"</span>);<span class="comment">//设置不透明度</span></span><br><span class="line">    $(<span class="string">"#panels"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).animate(&#123;<span class="attr">left</span>:<span class="string">"400px"</span>,<span class="attr">height</span>:<span class="string">"200px"</span>,<span class="attr">opacity</span>:<span class="string">"1"</span>&#125;,<span class="number">3000</span>)</span><br><span class="line">                .delay(<span class="number">1000</span>)     <span class="comment">// 延迟的是下一个动画</span></span><br><span class="line">                .animate(&#123;<span class="attr">top</span>:<span class="string">"200px"</span>,<span class="attr">width</span>:<span class="string">"200px"</span>&#125;,<span class="number">3000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string">其他动画方法   </span></span><br><span class="line"><span class="string">1、`</span>toggle(speed,[callback])<span class="string">`方法   </span></span><br><span class="line"><span class="string">2、`</span>slideToggle(speed,[easing],[callback])<span class="string">`;   </span></span><br><span class="line"><span class="string">3、`</span>fadeTo(speed,opacity,[callback])<span class="string">`;   </span></span><br><span class="line"><span class="string">4、`</span>fadeToggle(speed,[easing],[callback])<span class="string">`;   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*1、`</span>toggle()<span class="string">`   *</span></span><br><span class="line"><span class="string">可切换元素的可见状态   </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript </span><br><span class="line">$(<span class="string">"#panel h5.head"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).next().toggle();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>等价于：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#panel h5.head"</span>).toggle(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().show(<span class="string">"slow"</span>);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        $(<span class="keyword">this</span>).next().hide(<span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p><em>2、slideToggle()方法</em><br>通过高度变化切换匹配元素可见性<br><em>3、fadeTo()方法</em><br>把元素的不透明度以渐进方式调整到指定值，只调整元素的不透明度，<br><em>4、fadeToggle()方法</em><br>通过元素不透明度变化来切换元素的可见性，只调整元素的不透明度   </p><h1 id="jQuery与Ajax的应用"><a href="#jQuery与Ajax的应用" class="headerlink" title="jQuery与Ajax的应用"></a>jQuery与Ajax的应用</h1><h2 id="Ajax的优势和不足"><a href="#Ajax的优势和不足" class="headerlink" title="Ajax的优势和不足"></a>Ajax的优势和不足</h2><p><strong>Ajax的优势</strong><br>1、不需要插件支持<br>2、优秀的用户体验<br>3、提高<code>Web</code>程序的性能<br>4、减轻服务器和带宽的负担   </p><p><strong>Ajax的不足</strong><br>1、浏览器对<code>XMLHttpRequest</code>对象的支持度不足<br>2、破坏浏览器前进、后退按钮的正常功能<br>3、对搜索引擎的支持的不足<br>4、开发和调试工具的缺乏   </p><p><strong>Ajax的XMLHttpRequest对象</strong><br><code>Ajax</code>的核心是<code>XMLHttpRequest</code>对象，它是<code>Ajax</code>实现的关键—-发送异步请求、接收响应及执行回调都是通过它来完成的。<br><code>IE5</code>、<code>IE6</code>是以<code>ActiveXObject</code>的方式引入<code>XMLHttpRequest</code>对象的，而其他浏览器的<code>XMLHttpRequest</code>对象是<code>window</code>的子对象    </p><p><strong>使用原生 JS 写一个 Ajax</strong>   </p><p>  一. 定义一个函数，通过该函数来获取异步信息<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params"></span>)</span>&#123;     </span><br><span class="line"><span class="comment">//定义一个函数，通过该函数来获取异步信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li>声明一个空对象来装入 <code>XMLHttpRequest</code> 对象   </li><li><code>var xmlHttpReq = null;</code>   // 声明一个空对象来装入 XMLHttpRequest 对象   </li></ol><p>二. 实例化一个 <code>XMLHttpRequest</code> 对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    xmlHttpReq = <span class="keyword">new</span> XMLHttpRequest();    </span><br><span class="line">    <span class="comment">// 实例化一个 XMLHttpRequest 对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>使用 <code>open()</code> 方法初始化 <code>XMLHttpRequest</code> 对象，指定 <code>HTTP</code> 方法和要使用的服务器 <code>URL</code>;   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xmlHttpReq.open(<span class="string">"GET"</span>,<span class="string">"test.php"</span>,<span class="literal">true</span>);  </span><br><span class="line"><span class="comment">// 调用 open() 方法并采用异步方式</span></span><br></pre></td></tr></table></figure><p>使用 <code>onreadystatechange</code> 属性来注册该回调事件处理器，当 <code>readystatus</code> 状态改变时，会激发 <code>onreadystatechange</code>事件然后调用回调函数。    </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"> xmlHttpReq.onreadystatechange = RequestCallBack;</span><br><span class="line"> <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"> 使用 `</span>send()<span class="string">` 方法发送请求，使用 `</span>GET<span class="string">`方式可以不指定参数或者使用 `</span><span class="literal">null</span> <span class="string">`参数`</span>xmlHttpReq.send(<span class="literal">null</span>)<span class="string">`;    </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string"> 当请求状态改变时，`</span>XMLHttpRequest<span class="string">` 对象调用 `</span>onreadystatechange<span class="string">` 属性注册的事件处理器，在处理响应之前，事件处理器应该首先检查 `</span>readyStatus <span class="string">`的值和`</span> HTTP <span class="string">`状态。当请求完成加载`</span>（readyStatus == <span class="number">4</span>）<span class="string">`并且响应已经成功`</span>（HTTP 状态值为 <span class="number">200</span>）<span class="string">`，就可以处理响应内容；   </span></span><br><span class="line"><span class="string"> `</span><span class="string">``</span>javascript</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RequestCallBack</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xmlHttpReq.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xmlHttpReq.status == <span class="number">200</span>)&#123;</span><br><span class="line">            <span class="built_in">document</span>.getElementById(<span class="string">"resText"</span>).innerHTML = xmlHttpReq.responseText;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">## jQuery中的Ajax  </span></span><br><span class="line"><span class="string">`</span>jQuery<span class="string">` 对 `</span>Ajax<span class="string">` 操作进行封装，在 `</span>jQuery <span class="string">`中，`</span>$.ajax() <span class="string">`是最底层的方法，第二层是 `</span>load()<span class="string">`、`</span>$.get()<span class="string">`、`</span>$.post()<span class="string">`、`</span>$.grtJSON()<span class="string">`。   </span></span><br><span class="line"><span class="string">**1、load()方法**   </span></span><br><span class="line"><span class="string">语法结构：`</span>load(url [,data] [,callback]) <span class="string">`</span></span><br><span class="line"><span class="string">**load()方法参数解释**    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数 | 类型</span></span><br><span class="line"><span class="string">---|---</span></span><br><span class="line"><span class="string">url | String</span></span><br><span class="line"><span class="string">data（可选） | Object</span></span><br><span class="line"><span class="string">callback（可选） | Function</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">筛选载入的`</span>HTML<span class="string">`文档</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line">$(<span class="string">'#resText'</span>).load(<span class="string">"test.html .para"</span>);    </span><br><span class="line"><span class="comment">// 载入test.html页面中class为“para”的内容</span></span><br><span class="line"><span class="string">``</span><span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**传递方式**   </span></span><br><span class="line"><span class="string">`</span>load()<span class="string">`方法会根据参数`</span>data<span class="string">`来自动指定，有参数传递为`</span>POST<span class="string">`方式，无参数则为`</span>GET<span class="string">`方式   </span></span><br><span class="line"><span class="string">**回调函数**   </span></span><br><span class="line"><span class="string">有3个参数：1、请求返回的内容；2、请求的状态；3、`</span>XMLHttpRequest<span class="string">`对象      </span></span><br><span class="line"><span class="string">**注**：通常用于从`</span>Web<span class="string">`服务器获取静态文件     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**2、$.get()与$.post()方法**   </span></span><br><span class="line"><span class="string">（1）`</span>$.get()<span class="string">`使用`</span>GET<span class="string">`方式来进行异步请求   </span></span><br><span class="line"><span class="string">语法结构：`</span>$.get(url [,data] [,callback] [,type]);   <span class="string">`</span></span><br><span class="line"><span class="string">**$.get()方法参数解释**    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数 | 类型</span></span><br><span class="line"><span class="string">---|---</span></span><br><span class="line"><span class="string">url | String</span></span><br><span class="line"><span class="string">data（可选） | Object</span></span><br><span class="line"><span class="string">callback（可选）） | Function</span></span><br><span class="line"><span class="string">type（可选） | String</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**回调函数**  </span></span><br><span class="line"><span class="string">只有两个参数：1、`</span>data<span class="string">`，返回的内容，`</span>xml<span class="string">`文档，`</span>json<span class="string">`文件等；2、请求状态：`</span>success<span class="string">`、`</span>error<span class="string">`、`</span>notmodified<span class="string">`、`</span>timeout<span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**注**：只有当数据成功返回`</span>(success)<span class="string">`才被调用    </span></span><br><span class="line"><span class="string">（2）`</span>$.post()<span class="string">`使用`</span>POST<span class="string">`方式进行异步请求  `</span> $.post( url [, data] [, callback] [, type])  <span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**GET与POST的区别**  </span></span><br><span class="line"><span class="string">&lt;1&gt;`</span>GET<span class="string">`请求会将参数跟在`</span>URL<span class="string">`后进行传递，`</span>POST<span class="string">`则是作为`</span>HTTP<span class="string">`实体内容发送个`</span>Web<span class="string">`服务器。   </span></span><br><span class="line"><span class="string">&lt;2&gt;`</span>GET<span class="string">`对传输数据有大小限制（通常不大于`</span><span class="number">2</span>kb<span class="string">`），而`</span>POST<span class="string">`则要比`</span>GET<span class="string">`多的多（理论上不限制）   </span></span><br><span class="line"><span class="string">&lt;3&gt;`</span>GET<span class="string">`请求会被浏览器缓存下来，在某种情况下会有严重的安全性问题，而`</span>POST<span class="string">`则可避免    </span></span><br><span class="line"><span class="string">&lt;4&gt;`</span>GET<span class="string">`与`</span>POST<span class="string">`传递的数据在服务器端获取方式也不相同   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**3、$.getScript()方法和$.getJson()方法**   </span></span><br><span class="line"><span class="string">`</span>（<span class="number">1</span>）$.getScript()<span class="string">`     </span></span><br><span class="line"><span class="string">使用`</span>$.getScript()<span class="string">`方法加载一个`</span>js<span class="string">`文件就跟加载一个`</span>HTML<span class="string">`页面一样简单，而且不需要对`</span>js<span class="string">`文件进行处理，`</span>js<span class="string">`文件会自动执行    </span></span><br><span class="line"><span class="string">**回调函数**  </span></span><br><span class="line"><span class="string">会在`</span>js<span class="string">`加载成功后执行   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">（2）`</span>$.getJson()<span class="string">`    </span></span><br><span class="line"><span class="string">`</span>$.getJson()<span class="string">`用于加载`</span>json<span class="string">`文件     </span></span><br><span class="line"><span class="string">`</span>$.each()<span class="string">`方法，`</span>jQuery<span class="string">`中用于遍历对象和数组，接受两个参数：1、数组或对象；2、回调函数（接受两个参数：1、对象成员或数组索引；2、对应变量或内容）     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**4、$.ajax()方法**   </span></span><br><span class="line"><span class="string">`</span>$.ajax()<span class="string">` 方法是 `</span>jQuery<span class="string">` 最底层的 `</span>Ajax<span class="string">` 实现，   </span></span><br><span class="line"><span class="string">`</span>$.ajax(option)<span class="string">`   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数名称 | 类型 | 说明</span></span><br><span class="line"><span class="string">---|--- |---</span></span><br><span class="line"><span class="string">url | String | 发送请求的 URL（默认为当前页面）</span></span><br><span class="line"><span class="string">type | String | 请求方式，默认为 GET</span></span><br><span class="line"><span class="string">timeout | Number | 设置请求超时时间（毫秒）</span></span><br><span class="line"><span class="string">data | Object 或 String | 发送到服务器的数据</span></span><br><span class="line"><span class="string">dataTpye | String | 预期服务器返回的数据类型</span></span><br><span class="line"><span class="string">beforeSend | Function | 发送请求前可以修改 XMLHttpResponse 对象的函数</span></span><br><span class="line"><span class="string">complete | Function | 请求完成后调用的回调函数（请求失败或者成功均调用）</span></span><br><span class="line"><span class="string">success | Function | 请求成功后调用的回调函数</span></span><br><span class="line"><span class="string">error | Function | 请求失败后调用的回调函数</span></span><br><span class="line"><span class="string">global | Function | 默认为 true。是否触发全局 Ajax 事件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## 序列化元素</span></span><br><span class="line"><span class="string">**1、serialize()方法**   </span></span><br><span class="line"><span class="string">作用于一个`</span>jQuery<span class="string">`对象，能够将`</span>DOM<span class="string">`元素内容序列化为字符串，用于`</span>Ajax<span class="string">`请求      </span></span><br><span class="line"><span class="string">**注**：参数传递时要注意将参数进行编码，即使用`</span>URI<span class="string">`编码，若不希望编码带来麻烦，可以使用`</span>serialize()<span class="string">`方法，它会自动编码   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">**2、serializeArray()方法**      </span></span><br><span class="line"><span class="string">将`</span>DOM<span class="string">`序列化后，返回`</span>json<span class="string">`格式数据       </span></span><br><span class="line"><span class="string">**3、$.param()方法**   </span></span><br><span class="line"><span class="string">`</span>serialize()<span class="string">`方法核心，用以对一个对象按照`</span>key/value<span class="string">`进行序列化   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## jQuery中的Ajax全局事件  </span></span><br><span class="line"><span class="string">当`</span>Ajax<span class="string">`请求开始时，触发`</span>ajaxStart()<span class="string">`方法的回调函数；当`</span>Ajax<span class="string">`请求结束时，触发`</span>ajaxStop()<span class="string">`方法的回调函数   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">其他的全局方法   </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">方法名称 | 说明</span></span><br><span class="line"><span class="string">---|---</span></span><br><span class="line"><span class="string">ajaxComplete(callback) | Ajax请求完成时执行函数</span></span><br><span class="line"><span class="string">ajaxError(callback) | Ajax请求发生错误时执行函数，捕捉到的错误可以作为最后一个参数传递</span></span><br><span class="line"><span class="string">ajaxSend(callback) | Ajax请求发送前执行的函数</span></span><br><span class="line"><span class="string">ajaxSuccess(callback) | Ajax请求成功时执行函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## jQuery 性能优化</span></span><br><span class="line"><span class="string">1、使用最新版的`</span>jQuery<span class="string">`类库    </span></span><br><span class="line"><span class="string">2、使用合适的选择器（1、尽量使用id选择器，2、尽量给选择器指定上下文）    </span></span><br><span class="line"><span class="string">3、缓存对象（即使用一个变量将需要重复使用的`</span>jQuery<span class="string">`对象存下来，以避免多次获取）    </span></span><br><span class="line"><span class="string">4、循环时的`</span>DOM<span class="string">`操作（减少`</span>DOM<span class="string">`操作）     </span></span><br><span class="line"><span class="string">5、数组方式使用`</span>jQuery<span class="string">`对象（尽量使用`</span><span class="keyword">for</span><span class="string">`或`</span><span class="keyword">while</span><span class="string">`循环来处理`</span>jQuery<span class="string">`对象，而不是使用`</span>$.each()<span class="string">`）     </span></span><br><span class="line"><span class="string">**注**：检查`</span>jQuery<span class="string">`对象是否存在的方式应该使用`</span>length<span class="string">`属性   </span></span><br><span class="line"><span class="string">6、事件代理   </span></span><br><span class="line"><span class="string">7、将代码转化为`</span>jQuery<span class="string">`插件    </span></span><br><span class="line"><span class="string">8、使用`</span>join()<span class="string">`来拼接字符串，替代使用`</span>“+”<span class="string">`来拼接    </span></span><br><span class="line"><span class="string">9、合理利用`</span>HTML5<span class="string">`的`</span>Data<span class="string">`属性   </span></span><br><span class="line"><span class="string">10、尽量使用原生的`</span>JavaScript<span class="string">`方法   </span></span><br><span class="line"><span class="string">11、压缩`</span>JavaScript<span class="string">`     </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 使用合适的选择器    </span></span><br><span class="line">1. `$(“#id”)` `id` 选择器无疑是最佳提高性能的方式。因为 `jQuery `底层直接调用本地方法` document.getElementById()`，直接通过 `id `返回对应的元素可以有效的缩小你定位的` DOM `元素，建议从最近的 `ID `元素开始往下搜索。      </span><br><span class="line"><span class="number">2.</span> <span class="string">`$(“p”)`</span>、<span class="string">`$(“div”)`</span>、<span class="string">`$(“input”) `</span>标签选择器是性能优化第二选择，因为<span class="string">` jQuery`</span> 也是直接调用<span class="string">` JS `</span>原生方法     </span><br><span class="line"><span class="number">3.</span> <span class="string">`$(“.class”)`</span> 这是 <span class="string">`jQuery`</span> 封装的函数，<span class="string">`ie9+`</span> 以上是使用 <span class="string">`JS`</span> 的原生方法，<span class="string">`ie9`</span> 一下是使用 <span class="string">`DOM`</span> 搜索方式来实现    </span><br><span class="line"><span class="number">4.</span> <span class="string">`$(“[attribute=value]”)`</span>：利用属性来定位<span class="string">` DOM`</span> 元素，大部分都是使用<span class="string">` DOM `</span>搜索方式来达到效果。所以性能并不是很理想     </span><br><span class="line"><span class="number">5.</span> <span class="string">`$(“:hidden”)`</span>：这和上面利用属性类似，并且<span class="string">` jQuery`</span> 需要搜索每一个元素来定位这个选择器，所以尽量不要使用。 </span><br><span class="line"></span><br><span class="line">### 缓存对象   </span><br><span class="line"></span><br><span class="line">我们可以将经常用的对象使用变量缓存起来，因为 <span class="string">`jQuery `</span>会在创建每一个选择器的过程中，查找 <span class="string">`DOM`</span>。     </span><br><span class="line">**不要让相同的选择器在你的代码中出现多次。**   </span><br><span class="line"></span><br><span class="line">### 循环时的 DOM 操作   </span><br><span class="line"></span><br><span class="line">在一些循环时，例如 <span class="string">`for()`</span>、<span class="string">`while()`</span>、<span class="string">`$.each()`</span> 使用这些方法处理<span class="string">` DOM`</span> 元素时，要尽可能的减少操作 <span class="string">`DOM`</span>，可以使用变量将来储存元素，最后一次性将生产的<span class="string">` DOM `</span>插入或者删除。    </span><br><span class="line"></span><br><span class="line">### 数组方式使用 jQuery 对象</span><br><span class="line">使用 <span class="string">`jQuery`</span> 选择器获得的结果是一个 <span class="string">`jQuery`</span> 对象，然而，<span class="string">`jQuery`</span>类库会让你感觉你正在使用一个定义了索引和长度的数组。在性能方面，建议使用 <span class="string">`for`</span> 或者 <span class="string">`while`</span> 循环来处理，而不是 <span class="string">`$.each()`</span></span><br><span class="line">### 事件代理   </span><br><span class="line">每一个 <span class="string">`JavaScript`</span> 事件（例如：<span class="string">`click`</span>、<span class="string">`mouseover`</span> 等）都会冒泡到父节点，当我们需要给多个元素调用同个函数时会很有用。   </span><br><span class="line"></span><br><span class="line">比如，我们要单击表格的行使得改行背景颜色改变    </span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">$("myTable td").click(function()&#123;</span></span><br><span class="line"><span class="string">    $(this).css("background",'red')</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>  </span><br><span class="line"></span><br><span class="line">如果你是这样写的话，那么恭喜你，提供了一个错误的示例，🎉🎉。这样的弊端是，假使总共有<span class="string">` 100`</span> 个<span class="string">` td`</span>，那么在使用以上方式的时候，你绑定了<span class="string">` 100`</span> 个事件，天辣，是不是很恐怖。       </span><br><span class="line">正确的姿势是，只需要向他们的父节点绑定一次事件，然后通过 <span class="string">`event.target`</span> 获取到当前点击的元素。     </span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">$("myTable").click(function()&#123;</span></span><br><span class="line"><span class="string">    var $clicked =  $(e.target);   // 捕捉到触发的目标元素</span></span><br><span class="line"><span class="string">    $clicked.css("background",'red');</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure></li></ol><p>也可以这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"myTable td"</span>).on(<span class="string">'click'</span>,<span class="string">'td'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="keyword">this</span>).css(<span class="string">"background"</span>,<span class="string">'red'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 技术类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书单 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
